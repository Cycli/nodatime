id: NodaTime.Testing
language: CSharp
name:
  Default: NodaTime.Testing
qualifiedName:
  Default: NodaTime.Testing
type: Assembly
modifiers: {}
items:
- id: NodaTime.Testing
  commentId: N:NodaTime.Testing
  language: CSharp
  name:
    CSharp: NodaTime.Testing
    VB: NodaTime.Testing
  nameWithType:
    CSharp: NodaTime.Testing
    VB: NodaTime.Testing
  qualifiedName:
    CSharp: NodaTime.Testing
    VB: NodaTime.Testing
  type: Namespace
  assemblies:
  - NodaTime.Testing
  modifiers: {}
  items:
  - id: NodaTime.Testing.FakeClock
    commentId: T:NodaTime.Testing.FakeClock
    language: CSharp
    name:
      CSharp: FakeClock
      VB: FakeClock
    nameWithType:
      CSharp: FakeClock
      VB: FakeClock
    qualifiedName:
      CSharp: NodaTime.Testing.FakeClock
      VB: NodaTime.Testing.FakeClock
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing
    source:
      remote:
        path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: FakeClock
      path: src/NodaTime.Testing/FakeClock.cs
      startLine: 31
    summary: "\nClock which can be constructed with an initial instant, and then advanced programmatically.\nThis class is designed to be used when testing classes which take an <xref href=\"NodaTime.IClock\" data-throw-if-not-resolved=\"false\"></xref> as a dependency.\n"
    remarks: "\nThis class is somewhere between a fake and a stub, depending on how it's used - if it's set to\n<xref href=\"NodaTime.Testing.FakeClock.AutoAdvance\" data-throw-if-not-resolved=\"false\"></xref> then time will pass, but in a pretty odd way (i.e. dependent on how\noften it's consulted).\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class FakeClock : IClock'
        VB: >-
          Public NotInheritable Class FakeClock

              Implements IClock
    inheritance:
    - System.Object
    implements:
    - NodaTime.IClock
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant)
      commentId: M:NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant)
      language: CSharp
      name:
        CSharp: FakeClock(Instant)
        VB: FakeClock(Instant)
      nameWithType:
        CSharp: FakeClock.FakeClock(Instant)
        VB: FakeClock.FakeClock(Instant)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant)
        VB: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 40
      summary: "\nCreates a fake clock initially set to the given instant, with no auto-advance.\n"
      example: []
      syntax:
        content:
          CSharp: public FakeClock(Instant initial)
          VB: Public Sub New(initial As Instant)
        parameters:
        - id: initial
          type: NodaTime.Instant
      overload: NodaTime.Testing.FakeClock.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration)
      commentId: M:NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration)
      language: CSharp
      name:
        CSharp: FakeClock(Instant, Duration)
        VB: FakeClock(Instant, Duration)
      nameWithType:
        CSharp: FakeClock.FakeClock(Instant, Duration)
        VB: FakeClock.FakeClock(Instant, Duration)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant, NodaTime.Duration)
        VB: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant, NodaTime.Duration)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 47
      summary: "\nCreates a fake clock initially set to the given instant, with a given level of auto-advance.\n"
      example: []
      syntax:
        content:
          CSharp: public FakeClock(Instant initial, Duration autoAdvance)
          VB: Public Sub New(initial As Instant, autoAdvance As Duration)
        parameters:
        - id: initial
          type: NodaTime.Instant
        - id: autoAdvance
          type: NodaTime.Duration
      overload: NodaTime.Testing.FakeClock.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: FromUtc(Int32, Int32, Int32)
        VB: FromUtc(Int32, Int32, Int32)
      nameWithType:
        CSharp: FakeClock.FromUtc(Int32, Int32, Int32)
        VB: FakeClock.FromUtc(Int32, Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32)
        VB: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: FromUtc
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 56
      summary: "\nReturns a fake clock initially set to midnight of the given year/month/day in UTC in the ISO calendar.\n"
      example: []
      syntax:
        content:
          CSharp: public static FakeClock FromUtc(int year, int month, int dayOfMonth)
          VB: Public Shared Function FromUtc(year As Integer, month As Integer, dayOfMonth As Integer) As FakeClock
        parameters:
        - id: year
          type: System.Int32
        - id: month
          type: System.Int32
        - id: dayOfMonth
          type: System.Int32
        return:
          type: NodaTime.Testing.FakeClock
      overload: NodaTime.Testing.FakeClock.FromUtc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
        VB: FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: FakeClock.FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
        VB: FakeClock.FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
        VB: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: FromUtc
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 64
      summary: "\nReturns a fake clock initially set to the given year/month/day/time in UTC in the ISO calendar.\n"
      example: []
      syntax:
        content:
          CSharp: public static FakeClock FromUtc(int year, int month, int dayOfMonth, int hour, int minute, int second)
          VB: Public Shared Function FromUtc(year As Integer, month As Integer, dayOfMonth As Integer, hour As Integer, minute As Integer, second As Integer) As FakeClock
        parameters:
        - id: year
          type: System.Int32
        - id: month
          type: System.Int32
        - id: dayOfMonth
          type: System.Int32
        - id: hour
          type: System.Int32
        - id: minute
          type: System.Int32
        - id: second
          type: System.Int32
        return:
          type: NodaTime.Testing.FakeClock
      overload: NodaTime.Testing.FakeClock.FromUtc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
      commentId: M:NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
      language: CSharp
      name:
        CSharp: Advance(Duration)
        VB: Advance(Duration)
      nameWithType:
        CSharp: FakeClock.Advance(Duration)
        VB: FakeClock.Advance(Duration)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
        VB: NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Advance
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 72
      summary: "\nAdvances the clock by the given duration.\n"
      example: []
      syntax:
        content:
          CSharp: public void Advance(Duration duration)
          VB: Public Sub Advance(duration As Duration)
        parameters:
        - id: duration
          type: NodaTime.Duration
      overload: NodaTime.Testing.FakeClock.Advance*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceTicks(Int64)
        VB: AdvanceTicks(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceTicks(Int64)
        VB: FakeClock.AdvanceTicks(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceTicks
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 83
      summary: "\nAdvances the clock by the given number of ticks.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceTicks(long ticks)
          VB: Public Sub AdvanceTicks(ticks As Long)
        parameters:
        - id: ticks
          type: System.Int64
      overload: NodaTime.Testing.FakeClock.AdvanceTicks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceMilliseconds(Int64)
        VB: AdvanceMilliseconds(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceMilliseconds(Int64)
        VB: FakeClock.AdvanceMilliseconds(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceMilliseconds
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 91
      summary: "\nAdvances the clock by the given number of milliseconds.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceMilliseconds(long milliseconds)
          VB: Public Sub AdvanceMilliseconds(milliseconds As Long)
        parameters:
        - id: milliseconds
          type: System.Int64
      overload: NodaTime.Testing.FakeClock.AdvanceMilliseconds*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceSeconds(Int64)
        VB: AdvanceSeconds(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceSeconds(Int64)
        VB: FakeClock.AdvanceSeconds(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceSeconds
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 99
      summary: "\nAdvances the clock by the given number of seconds.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceSeconds(long seconds)
          VB: Public Sub AdvanceSeconds(seconds As Long)
        parameters:
        - id: seconds
          type: System.Int64
      overload: NodaTime.Testing.FakeClock.AdvanceSeconds*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceMinutes(Int64)
        VB: AdvanceMinutes(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceMinutes(Int64)
        VB: FakeClock.AdvanceMinutes(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceMinutes
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 107
      summary: "\nAdvances the clock by the given number of minutes.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceMinutes(long minutes)
          VB: Public Sub AdvanceMinutes(minutes As Long)
        parameters:
        - id: minutes
          type: System.Int64
      overload: NodaTime.Testing.FakeClock.AdvanceMinutes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceHours(Int64)
        VB: AdvanceHours(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceHours(Int64)
        VB: FakeClock.AdvanceHours(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceHours
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 115
      summary: "\nAdvances the clock by the given number of hours.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceHours(long hours)
          VB: Public Sub AdvanceHours(hours As Long)
        parameters:
        - id: hours
          type: System.Int64
      overload: NodaTime.Testing.FakeClock.AdvanceHours*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceDays(Int64)
        VB: AdvanceDays(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceDays(Int64)
        VB: FakeClock.AdvanceDays(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceDays
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 123
      summary: "\nAdvances the clock by the given number of standard (24-hour) days.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceDays(long days)
          VB: Public Sub AdvanceDays(days As Long)
        parameters:
        - id: days
          type: System.Int64
      overload: NodaTime.Testing.FakeClock.AdvanceDays*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
      commentId: M:NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
      language: CSharp
      name:
        CSharp: Reset(Instant)
        VB: Reset(Instant)
      nameWithType:
        CSharp: FakeClock.Reset(Instant)
        VB: FakeClock.Reset(Instant)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
        VB: NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Reset
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 131
      summary: "\nResets the clock to the given instant.\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset(Instant instant)
          VB: Public Sub Reset(instant As Instant)
        parameters:
        - id: instant
          type: NodaTime.Instant
      overload: NodaTime.Testing.FakeClock.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.Now
      commentId: P:NodaTime.Testing.FakeClock.Now
      language: CSharp
      name:
        CSharp: Now
        VB: Now
      nameWithType:
        CSharp: FakeClock.Now
        VB: FakeClock.Now
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.Now
        VB: NodaTime.Testing.FakeClock.Now
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Now
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 144
      summary: "\nReturns the \"current time\" for this clock. Unlike a normal clock, this\nproperty will return the same value from repeated calls until one of the methods\nto change the time is called.\n"
      example: []
      syntax:
        content:
          CSharp: public Instant Now { get; }
          VB: Public ReadOnly Property Now As Instant
        parameters: []
        return:
          type: NodaTime.Instant
      overload: NodaTime.Testing.FakeClock.Now*
      implements:
      - NodaTime.IClock.Now
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodaTime.Testing.FakeClock.AutoAdvance
      commentId: P:NodaTime.Testing.FakeClock.AutoAdvance
      language: CSharp
      name:
        CSharp: AutoAdvance
        VB: AutoAdvance
      nameWithType:
        CSharp: FakeClock.AutoAdvance
        VB: FakeClock.AutoAdvance
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AutoAdvance
        VB: NodaTime.Testing.FakeClock.AutoAdvance
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AutoAdvance
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 165
      summary: "\nAmount of time to advance the clock by each time <xref href=\"NodaTime.Testing.FakeClock.Now\" data-throw-if-not-resolved=\"false\"></xref> is fetched.\n"
      remarks: "\nThis defaults to zero, in which case the clock doesn't change other than by calls\nto <xref href=\"NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)\" data-throw-if-not-resolved=\"false\"></xref>. The value may be negative, to simulate particularly odd\nsystem clock effects.\n"
      example: []
      syntax:
        content:
          CSharp: public Duration AutoAdvance { get; set; }
          VB: Public Property AutoAdvance As Duration
        parameters: []
        return:
          type: NodaTime.Duration
      overload: NodaTime.Testing.FakeClock.AutoAdvance*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        NodaTime.Testing.FakeClock.Now: 
        NodaTime.Testing.FakeClock.Reset(NodaTime.Instant): 
    references:
      NodaTime.IClock: 
      NodaTime.Testing.FakeClock.AutoAdvance: 
- id: NodaTime.Testing.TimeZones
  commentId: N:NodaTime.Testing.TimeZones
  language: CSharp
  name:
    CSharp: NodaTime.Testing.TimeZones
    VB: NodaTime.Testing.TimeZones
  nameWithType:
    CSharp: NodaTime.Testing.TimeZones
    VB: NodaTime.Testing.TimeZones
  qualifiedName:
    CSharp: NodaTime.Testing.TimeZones
    VB: NodaTime.Testing.TimeZones
  type: Namespace
  assemblies:
  - NodaTime.Testing
  modifiers: {}
  items:
  - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    commentId: T:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    language: CSharp
    name:
      CSharp: SingleTransitionDateTimeZone
      VB: SingleTransitionDateTimeZone
    nameWithType:
      CSharp: SingleTransitionDateTimeZone
      VB: SingleTransitionDateTimeZone
    qualifiedName:
      CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
      VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing.TimeZones
    source:
      remote:
        path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: SingleTransitionDateTimeZone
      path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      startLine: 26
    summary: "\nTime zone with a single transition between two offsets. This provides a simple way to test behaviour across a transition.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class SingleTransitionDateTimeZone : DateTimeZone, IEquatable<DateTimeZone>'
        VB: >-
          Public NotInheritable Class SingleTransitionDateTimeZone

              Inherits DateTimeZone

              Implements IEquatable(Of DateTimeZone)
    inheritance:
    - System.Object
    - NodaTime.DateTimeZone
    implements:
    - System.IEquatable{NodaTime.DateTimeZone}
    inheritedMembers:
    - NodaTime.DateTimeZone.Utc
    - NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    - NodaTime.DateTimeZone.Id
    - NodaTime.DateTimeZone.MinOffset
    - NodaTime.DateTimeZone.MaxOffset
    - NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    - NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    - NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    - NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.ToString
    - NodaTime.DateTimeZone.Equals(System.Object)
    - NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      language: CSharp
      name:
        CSharp: EarlyInterval
        VB: EarlyInterval
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.EarlyInterval
        VB: SingleTransitionDateTimeZone.EarlyInterval
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: EarlyInterval
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 32
      summary: "\nThe <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> for the period before the transition, starting at the beginning of time.\n"
      example: []
      syntax:
        content:
          CSharp: public ZoneInterval EarlyInterval { get; }
          VB: Public ReadOnly Property EarlyInterval As ZoneInterval
        parameters: []
        return:
          type: NodaTime.TimeZones.ZoneInterval
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        NodaTime.TimeZones.ZoneInterval: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      language: CSharp
      name:
        CSharp: LateInterval
        VB: LateInterval
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.LateInterval
        VB: SingleTransitionDateTimeZone.LateInterval
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: LateInterval
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 38
      summary: "\nThe <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> for the period after the transition, ending at the end of time.\n"
      example: []
      syntax:
        content:
          CSharp: public ZoneInterval LateInterval { get; }
          VB: Public ReadOnly Property LateInterval As ZoneInterval
        parameters: []
        return:
          type: NodaTime.TimeZones.ZoneInterval
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        NodaTime.TimeZones.ZoneInterval: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: SingleTransitionDateTimeZone(Instant, Int32, Int32)
        VB: SingleTransitionDateTimeZone(Instant, Int32, Int32)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Int32, Int32)
        VB: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, System.Int32, System.Int32)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 46
      summary: "\nCreates a zone with a single transition between two offsets.\n"
      example: []
      syntax:
        content:
          CSharp: public SingleTransitionDateTimeZone(Instant transitionPoint, int offsetBeforeHours, int offsetAfterHours)
          VB: Public Sub New(transitionPoint As Instant, offsetBeforeHours As Integer, offsetAfterHours As Integer)
        parameters:
        - id: transitionPoint
          type: NodaTime.Instant
          description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
        - id: offsetBeforeHours
          type: System.Int32
          description: The offset of local time from UTC, in hours, before the transition.
        - id: offsetAfterHours
          type: System.Int32
          description: The offset of local time from UTC, in hours, before the transition.
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Instant: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)
      language: CSharp
      name:
        CSharp: SingleTransitionDateTimeZone(Instant, Offset, Offset)
        VB: SingleTransitionDateTimeZone(Instant, Offset, Offset)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset)
        VB: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 57
      summary: "\nCreates a zone with a single transition between two offsets.\n"
      example: []
      syntax:
        content:
          CSharp: public SingleTransitionDateTimeZone(Instant transitionPoint, Offset offsetBefore, Offset offsetAfter)
          VB: Public Sub New(transitionPoint As Instant, offsetBefore As Offset, offsetAfter As Offset)
        parameters:
        - id: transitionPoint
          type: NodaTime.Instant
          description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
        - id: offsetBefore
          type: NodaTime.Offset
          description: The offset of local time from UTC before the transition.
        - id: offsetAfter
          type: NodaTime.Offset
          description: The offset of local time from UTC before the transition.
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Instant: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      language: CSharp
      name:
        CSharp: GetZoneInterval(Instant)
        VB: GetZoneInterval(Instant)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.GetZoneInterval(Instant)
        VB: SingleTransitionDateTimeZone.GetZoneInterval(Instant)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetZoneInterval
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 70
      remarks: "\nThis returns either the zone interval before or after the transition, based on the instant provided.\n"
      example: []
      syntax:
        content:
          CSharp: public override ZoneInterval GetZoneInterval(Instant instant)
          VB: Public Overrides Function GetZoneInterval(instant As Instant) As ZoneInterval
        parameters:
        - id: instant
          type: NodaTime.Instant
        return:
          type: NodaTime.TimeZones.ZoneInterval
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
      overridden: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      language: CSharp
      name:
        CSharp: EqualsImpl(DateTimeZone)
        VB: EqualsImpl(DateTimeZone)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.EqualsImpl(DateTimeZone)
        VB: SingleTransitionDateTimeZone.EqualsImpl(DateTimeZone)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: EqualsImpl
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 76
      example: []
      syntax:
        content:
          CSharp: protected override bool EqualsImpl(DateTimeZone zone)
          VB: Protected Overrides Function EqualsImpl(zone As DateTimeZone) As Boolean
        parameters:
        - id: zone
          type: NodaTime.DateTimeZone
        return:
          type: System.Boolean
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*
      overridden: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.GetHashCode()
        VB: SingleTransitionDateTimeZone.GetHashCode()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode()
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.0.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetHashCode
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 83
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*
      overridden: NodaTime.DateTimeZone.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
references:
  NodaTime.IClock:
    name:
      CSharp:
      - id: NodaTime.IClock
        name: IClock
        nameWithType: IClock
        qualifiedName: NodaTime.IClock
      VB:
      - id: NodaTime.IClock
        name: IClock
        nameWithType: IClock
        qualifiedName: NodaTime.IClock
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.IClock
  NodaTime.Testing.FakeClock.AutoAdvance:
    commentId: P:NodaTime.Testing.FakeClock.AutoAdvance
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  NodaTime:
    name:
      CSharp:
      - name: NodaTime
        nameWithType: NodaTime
        qualifiedName: NodaTime
      VB:
      - name: NodaTime
        nameWithType: NodaTime
        qualifiedName: NodaTime
    isDefinition: true
    commentId: N:NodaTime
  NodaTime.Instant:
    name:
      CSharp:
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      VB:
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.Instant
  NodaTime.Testing.FakeClock.#ctor*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.#ctor*
        name: FakeClock
        nameWithType: FakeClock.FakeClock
        qualifiedName: NodaTime.Testing.FakeClock.FakeClock
      VB:
      - id: NodaTime.Testing.FakeClock.#ctor*
        name: FakeClock
        nameWithType: FakeClock.FakeClock
        qualifiedName: NodaTime.Testing.FakeClock.FakeClock
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.#ctor
  NodaTime.Duration:
    name:
      CSharp:
      - id: NodaTime.Duration
        name: Duration
        nameWithType: Duration
        qualifiedName: NodaTime.Duration
      VB:
      - id: NodaTime.Duration
        name: Duration
        nameWithType: Duration
        qualifiedName: NodaTime.Duration
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.Duration
  NodaTime.Testing:
    name:
      CSharp:
      - name: NodaTime.Testing
        nameWithType: NodaTime.Testing
        qualifiedName: NodaTime.Testing
      VB:
      - name: NodaTime.Testing
        nameWithType: NodaTime.Testing
        qualifiedName: NodaTime.Testing
    isDefinition: true
    commentId: N:NodaTime.Testing
  NodaTime.Testing.FakeClock:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock
        name: FakeClock
        nameWithType: FakeClock
        qualifiedName: NodaTime.Testing.FakeClock
      VB:
      - id: NodaTime.Testing.FakeClock
        name: FakeClock
        nameWithType: FakeClock
        qualifiedName: NodaTime.Testing.FakeClock
    isDefinition: true
    parent: NodaTime.Testing
    commentId: T:NodaTime.Testing.FakeClock
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  NodaTime.Testing.FakeClock.FromUtc*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.FromUtc*
        name: FromUtc
        nameWithType: FakeClock.FromUtc
        qualifiedName: NodaTime.Testing.FakeClock.FromUtc
      VB:
      - id: NodaTime.Testing.FakeClock.FromUtc*
        name: FromUtc
        nameWithType: FakeClock.FromUtc
        qualifiedName: NodaTime.Testing.FakeClock.FromUtc
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.FromUtc
  NodaTime.Testing.FakeClock.Advance*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.Advance*
        name: Advance
        nameWithType: FakeClock.Advance
        qualifiedName: NodaTime.Testing.FakeClock.Advance
      VB:
      - id: NodaTime.Testing.FakeClock.Advance*
        name: Advance
        nameWithType: FakeClock.Advance
        qualifiedName: NodaTime.Testing.FakeClock.Advance
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.Advance
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  NodaTime.Testing.FakeClock.AdvanceTicks*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceTicks*
        name: AdvanceTicks
        nameWithType: FakeClock.AdvanceTicks
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceTicks
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceTicks*
        name: AdvanceTicks
        nameWithType: FakeClock.AdvanceTicks
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceTicks
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceTicks
  NodaTime.Testing.FakeClock.AdvanceMilliseconds*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceMilliseconds*
        name: AdvanceMilliseconds
        nameWithType: FakeClock.AdvanceMilliseconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMilliseconds
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceMilliseconds*
        name: AdvanceMilliseconds
        nameWithType: FakeClock.AdvanceMilliseconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMilliseconds
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceMilliseconds
  NodaTime.Testing.FakeClock.AdvanceSeconds*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceSeconds*
        name: AdvanceSeconds
        nameWithType: FakeClock.AdvanceSeconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceSeconds
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceSeconds*
        name: AdvanceSeconds
        nameWithType: FakeClock.AdvanceSeconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceSeconds
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceSeconds
  NodaTime.Testing.FakeClock.AdvanceMinutes*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceMinutes*
        name: AdvanceMinutes
        nameWithType: FakeClock.AdvanceMinutes
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMinutes
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceMinutes*
        name: AdvanceMinutes
        nameWithType: FakeClock.AdvanceMinutes
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMinutes
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceMinutes
  NodaTime.Testing.FakeClock.AdvanceHours*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceHours*
        name: AdvanceHours
        nameWithType: FakeClock.AdvanceHours
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceHours
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceHours*
        name: AdvanceHours
        nameWithType: FakeClock.AdvanceHours
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceHours
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceHours
  NodaTime.Testing.FakeClock.AdvanceDays*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceDays*
        name: AdvanceDays
        nameWithType: FakeClock.AdvanceDays
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceDays
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceDays*
        name: AdvanceDays
        nameWithType: FakeClock.AdvanceDays
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceDays
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceDays
  NodaTime.Testing.FakeClock.Reset*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.Reset*
        name: Reset
        nameWithType: FakeClock.Reset
        qualifiedName: NodaTime.Testing.FakeClock.Reset
      VB:
      - id: NodaTime.Testing.FakeClock.Reset*
        name: Reset
        nameWithType: FakeClock.Reset
        qualifiedName: NodaTime.Testing.FakeClock.Reset
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.Reset
  NodaTime.Testing.FakeClock.Now*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.Now*
        name: Now
        nameWithType: FakeClock.Now
        qualifiedName: NodaTime.Testing.FakeClock.Now
      VB:
      - id: NodaTime.Testing.FakeClock.Now*
        name: Now
        nameWithType: FakeClock.Now
        qualifiedName: NodaTime.Testing.FakeClock.Now
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.Now
  NodaTime.IClock.Now:
    name:
      CSharp:
      - id: NodaTime.IClock.Now
        name: Now
        nameWithType: IClock.Now
        qualifiedName: NodaTime.IClock.Now
      VB:
      - id: NodaTime.IClock.Now
        name: Now
        nameWithType: IClock.Now
        qualifiedName: NodaTime.IClock.Now
    isDefinition: true
    parent: NodaTime.IClock
    commentId: P:NodaTime.IClock.Now
  NodaTime.Testing.FakeClock.Now:
    commentId: P:NodaTime.Testing.FakeClock.Now
  NodaTime.Testing.FakeClock.Reset(NodaTime.Instant):
    commentId: M:NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
  NodaTime.Testing.FakeClock.AutoAdvance*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AutoAdvance*
        name: AutoAdvance
        nameWithType: FakeClock.AutoAdvance
        qualifiedName: NodaTime.Testing.FakeClock.AutoAdvance
      VB:
      - id: NodaTime.Testing.FakeClock.AutoAdvance*
        name: AutoAdvance
        nameWithType: FakeClock.AutoAdvance
        qualifiedName: NodaTime.Testing.FakeClock.AutoAdvance
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AutoAdvance
  NodaTime.DateTimeZone:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      VB:
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.DateTimeZone
  NodaTime.DateTimeZone.Utc:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Utc
        name: Utc
        nameWithType: DateTimeZone.Utc
        qualifiedName: NodaTime.DateTimeZone.Utc
      VB:
      - id: NodaTime.DateTimeZone.Utc
        name: Utc
        nameWithType: DateTimeZone.Utc
        qualifiedName: NodaTime.DateTimeZone.Utc
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.Utc
  NodaTime.DateTimeZone.ForOffset(NodaTime.Offset):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
        name: ForOffset
        nameWithType: DateTimeZone.ForOffset
        qualifiedName: NodaTime.DateTimeZone.ForOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
        name: ForOffset
        nameWithType: DateTimeZone.ForOffset
        qualifiedName: NodaTime.DateTimeZone.ForOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  NodaTime.DateTimeZone.Id:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Id
        name: Id
        nameWithType: DateTimeZone.Id
        qualifiedName: NodaTime.DateTimeZone.Id
      VB:
      - id: NodaTime.DateTimeZone.Id
        name: Id
        nameWithType: DateTimeZone.Id
        qualifiedName: NodaTime.DateTimeZone.Id
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.Id
  NodaTime.DateTimeZone.MinOffset:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.MinOffset
        name: MinOffset
        nameWithType: DateTimeZone.MinOffset
        qualifiedName: NodaTime.DateTimeZone.MinOffset
      VB:
      - id: NodaTime.DateTimeZone.MinOffset
        name: MinOffset
        nameWithType: DateTimeZone.MinOffset
        qualifiedName: NodaTime.DateTimeZone.MinOffset
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.MinOffset
  NodaTime.DateTimeZone.MaxOffset:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.MaxOffset
        name: MaxOffset
        nameWithType: DateTimeZone.MaxOffset
        qualifiedName: NodaTime.DateTimeZone.MaxOffset
      VB:
      - id: NodaTime.DateTimeZone.MaxOffset
        name: MaxOffset
        nameWithType: DateTimeZone.MaxOffset
        qualifiedName: NodaTime.DateTimeZone.MaxOffset
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.MaxOffset
  NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
        name: GetUtcOffset
        nameWithType: DateTimeZone.GetUtcOffset
        qualifiedName: NodaTime.DateTimeZone.GetUtcOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
        name: GetUtcOffset
        nameWithType: DateTimeZone.GetUtcOffset
        qualifiedName: NodaTime.DateTimeZone.GetUtcOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
        name: AtStartOfDay
        nameWithType: DateTimeZone.AtStartOfDay
        qualifiedName: NodaTime.DateTimeZone.AtStartOfDay
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDate
        name: LocalDate
        nameWithType: LocalDate
        qualifiedName: NodaTime.LocalDate
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
        name: AtStartOfDay
        nameWithType: DateTimeZone.AtStartOfDay
        qualifiedName: NodaTime.DateTimeZone.AtStartOfDay
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDate
        name: LocalDate
        nameWithType: LocalDate
        qualifiedName: NodaTime.LocalDate
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
        name: MapLocal
        nameWithType: DateTimeZone.MapLocal
        qualifiedName: NodaTime.DateTimeZone.MapLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
        name: MapLocal
        nameWithType: DateTimeZone.MapLocal
        qualifiedName: NodaTime.DateTimeZone.MapLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
        name: ResolveLocal
        nameWithType: DateTimeZone.ResolveLocal
        qualifiedName: NodaTime.DateTimeZone.ResolveLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodaTime.TimeZones.ZoneLocalMappingResolver
        name: ZoneLocalMappingResolver
        nameWithType: ZoneLocalMappingResolver
        qualifiedName: NodaTime.TimeZones.ZoneLocalMappingResolver
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
        name: ResolveLocal
        nameWithType: DateTimeZone.ResolveLocal
        qualifiedName: NodaTime.DateTimeZone.ResolveLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodaTime.TimeZones.ZoneLocalMappingResolver
        name: ZoneLocalMappingResolver
        nameWithType: ZoneLocalMappingResolver
        qualifiedName: NodaTime.TimeZones.ZoneLocalMappingResolver
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
        name: AtStrictly
        nameWithType: DateTimeZone.AtStrictly
        qualifiedName: NodaTime.DateTimeZone.AtStrictly
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
        name: AtStrictly
        nameWithType: DateTimeZone.AtStrictly
        qualifiedName: NodaTime.DateTimeZone.AtStrictly
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
        name: AtLeniently
        nameWithType: DateTimeZone.AtLeniently
        qualifiedName: NodaTime.DateTimeZone.AtLeniently
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
        name: AtLeniently
        nameWithType: DateTimeZone.AtLeniently
        qualifiedName: NodaTime.DateTimeZone.AtLeniently
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  NodaTime.DateTimeZone.ToString:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.ToString
        name: ToString
        nameWithType: DateTimeZone.ToString
        qualifiedName: NodaTime.DateTimeZone.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.ToString
        name: ToString
        nameWithType: DateTimeZone.ToString
        qualifiedName: NodaTime.DateTimeZone.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.ToString
  NodaTime.DateTimeZone.Equals(System.Object):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Equals(System.Object)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.Equals(System.Object)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.Equals(System.Object)
  NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
  System.IEquatable`1:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.IEquatable`1
  System.IEquatable{NodaTime.DateTimeZone}:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1
    parent: System
    commentId: T:System.IEquatable{NodaTime.DateTimeZone}
  NodaTime.TimeZones.ZoneInterval:
    name:
      CSharp:
      - id: NodaTime.TimeZones.ZoneInterval
        name: ZoneInterval
        nameWithType: ZoneInterval
        qualifiedName: NodaTime.TimeZones.ZoneInterval
      VB:
      - id: NodaTime.TimeZones.ZoneInterval
        name: ZoneInterval
        nameWithType: ZoneInterval
        qualifiedName: NodaTime.TimeZones.ZoneInterval
    isDefinition: true
    parent: NodaTime.TimeZones
    commentId: T:NodaTime.TimeZones.ZoneInterval
  NodaTime.TimeZones:
    name:
      CSharp:
      - name: NodaTime.TimeZones
        nameWithType: NodaTime.TimeZones
        qualifiedName: NodaTime.TimeZones
      VB:
      - name: NodaTime.TimeZones
        nameWithType: NodaTime.TimeZones
        qualifiedName: NodaTime.TimeZones
    isDefinition: true
    commentId: N:NodaTime.TimeZones
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
        name: EarlyInterval
        nameWithType: SingleTransitionDateTimeZone.EarlyInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
        name: EarlyInterval
        nameWithType: SingleTransitionDateTimeZone.EarlyInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
        name: LateInterval
        nameWithType: SingleTransitionDateTimeZone.LateInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
        name: LateInterval
        nameWithType: SingleTransitionDateTimeZone.LateInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor
  NodaTime.Offset:
    name:
      CSharp:
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
      VB:
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.Offset
  NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
        name: GetZoneInterval
        nameWithType: DateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.DateTimeZone.GetZoneInterval
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
        name: GetZoneInterval
        nameWithType: DateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.DateTimeZone.GetZoneInterval
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
        name: GetZoneInterval
        nameWithType: SingleTransitionDateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
        name: GetZoneInterval
        nameWithType: SingleTransitionDateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
        name: EqualsImpl
        nameWithType: DateTimeZone.EqualsImpl
        qualifiedName: NodaTime.DateTimeZone.EqualsImpl
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
        name: EqualsImpl
        nameWithType: DateTimeZone.EqualsImpl
        qualifiedName: NodaTime.DateTimeZone.EqualsImpl
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*
        name: EqualsImpl
        nameWithType: SingleTransitionDateTimeZone.EqualsImpl
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*
        name: EqualsImpl
        nameWithType: SingleTransitionDateTimeZone.EqualsImpl
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl
  NodaTime.DateTimeZone.GetHashCode:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetHashCode
        name: GetHashCode
        nameWithType: DateTimeZone.GetHashCode
        qualifiedName: NodaTime.DateTimeZone.GetHashCode
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetHashCode
        name: GetHashCode
        nameWithType: DateTimeZone.GetHashCode
        qualifiedName: NodaTime.DateTimeZone.GetHashCode
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetHashCode
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*
        name: GetHashCode
        nameWithType: SingleTransitionDateTimeZone.GetHashCode
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*
        name: GetHashCode
        nameWithType: SingleTransitionDateTimeZone.GetHashCode
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    isDefinition: true
    commentId: T:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
  NodaTime.Testing.TimeZones:
    name:
      CSharp:
      - name: NodaTime.Testing.TimeZones
        nameWithType: NodaTime.Testing.TimeZones
        qualifiedName: NodaTime.Testing.TimeZones
      VB:
      - name: NodaTime.Testing.TimeZones
        nameWithType: NodaTime.Testing.TimeZones
        qualifiedName: NodaTime.Testing.TimeZones
    isDefinition: true
    commentId: N:NodaTime.Testing.TimeZones
