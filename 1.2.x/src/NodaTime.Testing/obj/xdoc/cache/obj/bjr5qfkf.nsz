id: NodaTime.Testing
language: CSharp
name:
  Default: NodaTime.Testing
qualifiedName:
  Default: NodaTime.Testing
type: Assembly
modifiers: {}
items:
- id: NodaTime.Testing
  commentId: N:NodaTime.Testing
  language: CSharp
  name:
    CSharp: NodaTime.Testing
    VB: NodaTime.Testing
  nameWithType:
    CSharp: NodaTime.Testing
    VB: NodaTime.Testing
  qualifiedName:
    CSharp: NodaTime.Testing
    VB: NodaTime.Testing
  type: Namespace
  assemblies:
  - NodaTime.Testing
  modifiers: {}
  items:
  - id: NodaTime.Testing.FakeClock
    commentId: T:NodaTime.Testing.FakeClock
    language: CSharp
    name:
      CSharp: FakeClock
      VB: FakeClock
    nameWithType:
      CSharp: FakeClock
      VB: FakeClock
    qualifiedName:
      CSharp: NodaTime.Testing.FakeClock
      VB: NodaTime.Testing.FakeClock
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing
    source:
      remote:
        path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: FakeClock
      path: src/NodaTime.Testing/FakeClock.cs
      startLine: 20
    summary: "\nClock which can be constructed with an initial instant, and then advanced programmatically (and optionally,\nautomatically advanced on each read).\nThis class is designed to be used when testing classes which take an <xref href=\"NodaTime.IClock\" data-throw-if-not-resolved=\"false\"></xref> as a dependency.\n"
    remarks: "\nThis class is somewhere between a fake and a stub, depending on how it's used - if it's set to\n<xref href=\"NodaTime.Testing.FakeClock.AutoAdvance\" data-throw-if-not-resolved=\"false\"></xref> then time will pass, but in a pretty odd way (i.e. dependent on how\noften it's consulted).\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class FakeClock : IClock'
        VB: >-
          Public NotInheritable Class FakeClock

              Implements IClock
    inheritance:
    - System.Object
    implements:
    - NodaTime.IClock
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant)
      commentId: M:NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant)
      language: CSharp
      name:
        CSharp: FakeClock(Instant)
        VB: FakeClock(Instant)
      nameWithType:
        CSharp: FakeClock.FakeClock(Instant)
        VB: FakeClock.FakeClock(Instant)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant)
        VB: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 30
      summary: "\nCreates a fake clock initially set to the given instant, with no auto-advance.\n"
      example: []
      syntax:
        content:
          CSharp: public FakeClock(Instant initial)
          VB: Public Sub New(initial As Instant)
        parameters:
        - id: initial
          type: NodaTime.Instant
          description: The initial instant.
      overload: NodaTime.Testing.FakeClock.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration)
      commentId: M:NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration)
      language: CSharp
      name:
        CSharp: FakeClock(Instant, Duration)
        VB: FakeClock(Instant, Duration)
      nameWithType:
        CSharp: FakeClock.FakeClock(Instant, Duration)
        VB: FakeClock.FakeClock(Instant, Duration)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant, NodaTime.Duration)
        VB: NodaTime.Testing.FakeClock.FakeClock(NodaTime.Instant, NodaTime.Duration)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 41
      summary: "\nCreates a fake clock initially set to the given instant. The clock will advance by the given duration on\neach read.\n"
      example: []
      syntax:
        content:
          CSharp: public FakeClock(Instant initial, Duration autoAdvance)
          VB: Public Sub New(initial As Instant, autoAdvance As Duration)
        parameters:
        - id: initial
          type: NodaTime.Instant
          description: The initial instant.
        - id: autoAdvance
          type: NodaTime.Duration
          description: The duration to advance the clock on each read.
      overload: NodaTime.Testing.FakeClock.#ctor*
      seealso:
      - linkId: NodaTime.Testing.FakeClock.AutoAdvance
        commentId: P:NodaTime.Testing.FakeClock.AutoAdvance
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Testing.FakeClock.AutoAdvance: 
    - id: NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: FromUtc(Int32, Int32, Int32)
        VB: FromUtc(Int32, Int32, Int32)
      nameWithType:
        CSharp: FakeClock.FromUtc(Int32, Int32, Int32)
        VB: FakeClock.FromUtc(Int32, Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32)
        VB: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: FromUtc
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 56
      summary: "\nReturns a fake clock initially set to midnight of the given year/month/day in UTC in the ISO calendar.\nThe value of the <xref href=\"NodaTime.Testing.FakeClock.AutoAdvance\" data-throw-if-not-resolved=\"false\"></xref> property will be initialised to zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static FakeClock FromUtc(int year, int monthOfYear, int dayOfMonth)
          VB: Public Shared Function FromUtc(year As Integer, monthOfYear As Integer, dayOfMonth As Integer) As FakeClock
        parameters:
        - id: year
          type: System.Int32
          description: >-
            The year. This is the "absolute year",

            so a value of 0 means 1 BC, for example.
        - id: monthOfYear
          type: System.Int32
          description: The month of year.
        - id: dayOfMonth
          type: System.Int32
          description: The day of month.
        return:
          type: NodaTime.Testing.FakeClock
          description: A <xref href="NodaTime.Testing.FakeClock" data-throw-if-not-resolved="false"></xref> initialised to the given instant, with no auto-advance.
      overload: NodaTime.Testing.FakeClock.FromUtc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        NodaTime.Testing.FakeClock.AutoAdvance: 
        NodaTime.Testing.FakeClock: 
    - id: NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.FakeClock.FromUtc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
        VB: FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: FakeClock.FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
        VB: FakeClock.FromUtc(Int32, Int32, Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
        VB: NodaTime.Testing.FakeClock.FromUtc(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: FromUtc
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 73
      summary: "\nReturns a fake clock initially set to the given year/month/day/time in UTC in the ISO calendar.\nThe value of the <xref href=\"NodaTime.Testing.FakeClock.AutoAdvance\" data-throw-if-not-resolved=\"false\"></xref> property will be initialised to zero.\n"
      example: []
      syntax:
        content:
          CSharp: public static FakeClock FromUtc(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute)
          VB: Public Shared Function FromUtc(year As Integer, monthOfYear As Integer, dayOfMonth As Integer, hourOfDay As Integer, minuteOfHour As Integer, secondOfMinute As Integer) As FakeClock
        parameters:
        - id: year
          type: System.Int32
          description: >-
            The year. This is the "absolute year",

            so a value of 0 means 1 BC, for example.
        - id: monthOfYear
          type: System.Int32
          description: The month of year.
        - id: dayOfMonth
          type: System.Int32
          description: The day of month.
        - id: hourOfDay
          type: System.Int32
          description: The hour.
        - id: minuteOfHour
          type: System.Int32
          description: The minute.
        - id: secondOfMinute
          type: System.Int32
          description: The second.
        return:
          type: NodaTime.Testing.FakeClock
          description: A <xref href="NodaTime.Testing.FakeClock" data-throw-if-not-resolved="false"></xref> initialised to the given instant, with no auto-advance.
      overload: NodaTime.Testing.FakeClock.FromUtc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        NodaTime.Testing.FakeClock.AutoAdvance: 
        NodaTime.Testing.FakeClock: 
    - id: NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
      commentId: M:NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
      language: CSharp
      name:
        CSharp: Advance(Duration)
        VB: Advance(Duration)
      nameWithType:
        CSharp: FakeClock.Advance(Duration)
        VB: FakeClock.Advance(Duration)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
        VB: NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Advance
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 83
      summary: "\nAdvances the clock by the given duration.\n"
      example: []
      syntax:
        content:
          CSharp: public void Advance(Duration duration)
          VB: Public Sub Advance(duration As Duration)
        parameters:
        - id: duration
          type: NodaTime.Duration
          description: >-
            The duration to advance the clock by (or if negative, the duration to move it back

            by).
      overload: NodaTime.Testing.FakeClock.Advance*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceTicks(Int64)
        VB: AdvanceTicks(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceTicks(Int64)
        VB: FakeClock.AdvanceTicks(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceTicks(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceTicks
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 96
      summary: "\nAdvances the clock by the given number of ticks.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceTicks(long ticks)
          VB: Public Sub AdvanceTicks(ticks As Long)
        parameters:
        - id: ticks
          type: System.Int64
          description: >-
            The number of ticks to advance the clock by (or if negative, the number to move it back

            by).
      overload: NodaTime.Testing.FakeClock.AdvanceTicks*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceMilliseconds(Int64)
        VB: AdvanceMilliseconds(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceMilliseconds(Int64)
        VB: FakeClock.AdvanceMilliseconds(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceMilliseconds(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceMilliseconds
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 106
      summary: "\nAdvances the clock by the given number of milliseconds.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceMilliseconds(long milliseconds)
          VB: Public Sub AdvanceMilliseconds(milliseconds As Long)
        parameters:
        - id: milliseconds
          type: System.Int64
          description: >-
            The number of milliseconds to advance the clock by (or if negative, the number

            to move it back by).
      overload: NodaTime.Testing.FakeClock.AdvanceMilliseconds*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceSeconds(Int64)
        VB: AdvanceSeconds(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceSeconds(Int64)
        VB: FakeClock.AdvanceSeconds(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceSeconds(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceSeconds
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 116
      summary: "\nAdvances the clock by the given number of seconds.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceSeconds(long seconds)
          VB: Public Sub AdvanceSeconds(seconds As Long)
        parameters:
        - id: seconds
          type: System.Int64
          description: >-
            The number of seconds to advance the clock by (or if negative, the number to move it

            back by).
      overload: NodaTime.Testing.FakeClock.AdvanceSeconds*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceMinutes(Int64)
        VB: AdvanceMinutes(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceMinutes(Int64)
        VB: FakeClock.AdvanceMinutes(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceMinutes(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceMinutes
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 126
      summary: "\nAdvances the clock by the given number of minutes.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceMinutes(long minutes)
          VB: Public Sub AdvanceMinutes(minutes As Long)
        parameters:
        - id: minutes
          type: System.Int64
          description: >-
            The number of minutes to advance the clock by (or if negative, the number to move it

            back by).
      overload: NodaTime.Testing.FakeClock.AdvanceMinutes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceHours(Int64)
        VB: AdvanceHours(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceHours(Int64)
        VB: FakeClock.AdvanceHours(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceHours(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceHours
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 136
      summary: "\nAdvances the clock by the given number of hours.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceHours(long hours)
          VB: Public Sub AdvanceHours(hours As Long)
        parameters:
        - id: hours
          type: System.Int64
          description: >-
            The number of hours to advance the clock by (or if negative, the number to move it

            back by).
      overload: NodaTime.Testing.FakeClock.AdvanceHours*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
      commentId: M:NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
      language: CSharp
      name:
        CSharp: AdvanceDays(Int64)
        VB: AdvanceDays(Int64)
      nameWithType:
        CSharp: FakeClock.AdvanceDays(Int64)
        VB: FakeClock.AdvanceDays(Int64)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
        VB: NodaTime.Testing.FakeClock.AdvanceDays(System.Int64)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AdvanceDays
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 146
      summary: "\nAdvances the clock by the given number of standard (24-hour) days.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdvanceDays(long days)
          VB: Public Sub AdvanceDays(days As Long)
        parameters:
        - id: days
          type: System.Int64
          description: >-
            The number of days to advance the clock by (or if negative, the number to move it

            back by).
      overload: NodaTime.Testing.FakeClock.AdvanceDays*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
      commentId: M:NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
      language: CSharp
      name:
        CSharp: Reset(Instant)
        VB: Reset(Instant)
      nameWithType:
        CSharp: FakeClock.Reset(Instant)
        VB: FakeClock.Reset(Instant)
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
        VB: NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Reset
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 156
      summary: "\nResets the clock to the given instant.\nThe value of the <xref href=\"NodaTime.Testing.FakeClock.AutoAdvance\" data-throw-if-not-resolved=\"false\"></xref> property will be unchanged.\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset(Instant instant)
          VB: Public Sub Reset(instant As Instant)
        parameters:
        - id: instant
          type: NodaTime.Instant
          description: The instant to set the clock to.
      overload: NodaTime.Testing.FakeClock.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Testing.FakeClock.AutoAdvance: 
    - id: NodaTime.Testing.FakeClock.Now
      commentId: P:NodaTime.Testing.FakeClock.Now
      language: CSharp
      name:
        CSharp: Now
        VB: Now
      nameWithType:
        CSharp: FakeClock.Now
        VB: FakeClock.Now
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.Now
        VB: NodaTime.Testing.FakeClock.Now
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Now
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 173
      summary: "\nReturns the \"current time\" for this clock. Unlike a normal clock, this\nproperty may return the same value from repeated calls until one of the methods\nto change the time is called.\n"
      remarks: "\nIf the value of the <xref href=\"NodaTime.Testing.FakeClock.AutoAdvance\" data-throw-if-not-resolved=\"false\"></xref> property is non-zero, then every\ncall to this method will advance the current time by that value.\n"
      example: []
      syntax:
        content:
          CSharp: public Instant Now { get; }
          VB: Public ReadOnly Property Now As Instant
        parameters: []
        return:
          type: NodaTime.Instant
      overload: NodaTime.Testing.FakeClock.Now*
      implements:
      - NodaTime.IClock.Now
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        NodaTime.Testing.FakeClock.AutoAdvance: 
    - id: NodaTime.Testing.FakeClock.AutoAdvance
      commentId: P:NodaTime.Testing.FakeClock.AutoAdvance
      language: CSharp
      name:
        CSharp: AutoAdvance
        VB: AutoAdvance
      nameWithType:
        CSharp: FakeClock.AutoAdvance
        VB: FakeClock.AutoAdvance
      qualifiedName:
        CSharp: NodaTime.Testing.FakeClock.AutoAdvance
        VB: NodaTime.Testing.FakeClock.AutoAdvance
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/FakeClock.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: AutoAdvance
        path: src/NodaTime.Testing/FakeClock.cs
        startLine: 200
      summary: "\nAmount of time to advance the clock by on each call to read the current time.\n"
      remarks: "\n<p>\nThis defaults to zero, with the exception of the <xref href=\"NodaTime.Testing.FakeClock.%23ctor(NodaTime.Instant%2cNodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref> constructor,\nwhich takes the initial value directly.  If this is zero, the current time as reported by this clock will\nnot change other than by calls to <xref href=\"NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)\" data-throw-if-not-resolved=\"false\"></xref> or to one of the <xref href=\"NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)\" data-throw-if-not-resolved=\"false\"></xref> methods.\n</p>\n<p>\nThe value could even be negative, to simulate particularly odd system clock effects.\n</p>\n"
      example: []
      syntax:
        content:
          CSharp: public Duration AutoAdvance { get; set; }
          VB: Public Property AutoAdvance As Duration
        parameters: []
        return:
          type: NodaTime.Duration
      overload: NodaTime.Testing.FakeClock.AutoAdvance*
      seealso:
      - linkId: NodaTime.Testing.FakeClock.Now
        commentId: P:NodaTime.Testing.FakeClock.Now
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration): 
        NodaTime.Testing.FakeClock.Reset(NodaTime.Instant): 
        NodaTime.Testing.FakeClock.Advance(NodaTime.Duration): 
        NodaTime.Testing.FakeClock.Now: 
    references:
      NodaTime.IClock: 
      NodaTime.Testing.FakeClock.AutoAdvance: 
- id: NodaTime.Testing.TimeZones
  commentId: N:NodaTime.Testing.TimeZones
  language: CSharp
  name:
    CSharp: NodaTime.Testing.TimeZones
    VB: NodaTime.Testing.TimeZones
  nameWithType:
    CSharp: NodaTime.Testing.TimeZones
    VB: NodaTime.Testing.TimeZones
  qualifiedName:
    CSharp: NodaTime.Testing.TimeZones
    VB: NodaTime.Testing.TimeZones
  type: Namespace
  assemblies:
  - NodaTime.Testing
  modifiers: {}
  items:
  - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
    commentId: T:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
    language: CSharp
    name:
      CSharp: MultiTransitionDateTimeZone
      VB: MultiTransitionDateTimeZone
    nameWithType:
      CSharp: MultiTransitionDateTimeZone
      VB: MultiTransitionDateTimeZone
    qualifiedName:
      CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
      VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing.TimeZones
    source:
      remote:
        path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: MultiTransitionDateTimeZone
      path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      startLine: 17
    summary: "\nTime zone with multiple transitions, created via a builder.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class MultiTransitionDateTimeZone : DateTimeZone, IEquatable<DateTimeZone>, IZoneIntervalMap'
        VB: >-
          Public NotInheritable Class MultiTransitionDateTimeZone

              Inherits DateTimeZone

              Implements IEquatable(Of DateTimeZone), IZoneIntervalMap
    inheritance:
    - System.Object
    - NodaTime.DateTimeZone
    implements:
    - System.IEquatable{NodaTime.DateTimeZone}
    inheritedMembers:
    - NodaTime.DateTimeZone.Utc
    - NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    - NodaTime.DateTimeZone.Id
    - NodaTime.DateTimeZone.MinOffset
    - NodaTime.DateTimeZone.MaxOffset
    - NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    - NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    - NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    - NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.ToString
    - NodaTime.DateTimeZone.Equals(System.Object)
    - NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
    - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
    - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
      commentId: P:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
      language: CSharp
      name:
        CSharp: Intervals
        VB: Intervals
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Intervals
        VB: MultiTransitionDateTimeZone.Intervals
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Intervals
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 25
      summary: "\nZone intervals within this time zone, in chronological order, spanning the whole time line.\n"
      example: []
      syntax:
        content:
          CSharp: public ReadOnlyCollection<ZoneInterval> Intervals { get; }
          VB: Public ReadOnly Property Intervals As ReadOnlyCollection(Of ZoneInterval)
        parameters: []
        return:
          type: System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.TimeZones.ZoneInterval}
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
      commentId: P:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
      language: CSharp
      name:
        CSharp: Transitions
        VB: Transitions
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Transitions
        VB: MultiTransitionDateTimeZone.Transitions
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Transitions
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 30
      summary: "\nTransition points between intervals.\n"
      example: []
      syntax:
        content:
          CSharp: public ReadOnlyCollection<Instant> Transitions { get; }
          VB: Public ReadOnly Property Transitions As ReadOnlyCollection(Of Instant)
        parameters: []
        return:
          type: System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.Instant}
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      language: CSharp
      name:
        CSharp: GetZoneInterval(Instant)
        VB: GetZoneInterval(Instant)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.GetZoneInterval(Instant)
        VB: MultiTransitionDateTimeZone.GetZoneInterval(Instant)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetZoneInterval
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 40
      example: []
      syntax:
        content:
          CSharp: public override ZoneInterval GetZoneInterval(Instant instant)
          VB: Public Overrides Function GetZoneInterval(instant As Instant) As ZoneInterval
        parameters:
        - id: instant
          type: NodaTime.Instant
        return:
          type: NodaTime.TimeZones.ZoneInterval
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval*
      overridden: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      language: CSharp
      name:
        CSharp: EqualsImpl(DateTimeZone)
        VB: EqualsImpl(DateTimeZone)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.EqualsImpl(DateTimeZone)
        VB: MultiTransitionDateTimeZone.EqualsImpl(DateTimeZone)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: EqualsImpl
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 70
      example: []
      syntax:
        content:
          CSharp: protected override bool EqualsImpl(DateTimeZone zone)
          VB: Protected Overrides Function EqualsImpl(zone As DateTimeZone) As Boolean
        parameters:
        - id: zone
          type: NodaTime.DateTimeZone
        return:
          type: System.Boolean
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl*
      overridden: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.GetHashCode()
        VB: MultiTransitionDateTimeZone.GetHashCode()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode()
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetHashCode
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 77
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode*
      overridden: NodaTime.DateTimeZone.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
    commentId: T:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
    language: CSharp
    name:
      CSharp: MultiTransitionDateTimeZone.Builder
      VB: MultiTransitionDateTimeZone.Builder
    nameWithType:
      CSharp: MultiTransitionDateTimeZone.Builder
      VB: MultiTransitionDateTimeZone.Builder
    qualifiedName:
      CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
      VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing.TimeZones
    source:
      remote:
        path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: Builder
      path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
      startLine: 86
    summary: "\nBuilder to create instances of <xref href=\"NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone\" data-throw-if-not-resolved=\"false\"></xref>. Each builder\ncan only be built once.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class Builder : IEnumerable'
        VB: >-
          Public NotInheritable Class Builder

              Implements IEnumerable
    inheritance:
    - System.Object
    implements:
    - System.Collections.IEnumerable
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id
      commentId: P:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Id
        VB: MultiTransitionDateTimeZone.Builder.Id
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Id
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 97
      summary: "\nID of the time zone which will be built.\n"
      example: []
      syntax:
        content:
          CSharp: public string Id { get; set; }
          VB: Public Property Id As String
        parameters: []
        return:
          type: System.String
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor
      language: CSharp
      name:
        CSharp: Builder()
        VB: Builder()
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Builder()
        VB: MultiTransitionDateTimeZone.Builder.Builder()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder()
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder()
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 103
      summary: "\nConstructs a builder using an ID of \"MultiZone\", an initial offset of zero (standard and savings),\nand an initial name of \"First\".\n"
      example: []
      syntax:
        content:
          CSharp: public Builder()
          VB: Public Sub New
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor(System.Int32,System.String)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: Builder(Int32, String)
        VB: Builder(Int32, String)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Builder(Int32, String)
        VB: MultiTransitionDateTimeZone.Builder.Builder(Int32, String)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder(System.Int32, System.String)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder(System.Int32, System.String)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 113
      summary: "\nConstructs a builder using the given first name, standard offset, and a daylight saving\noffset of 0. The ID is initially \"MultiZone\".\n"
      example: []
      syntax:
        content:
          CSharp: public Builder(int firstOffsetHours, string firstName)
          VB: Public Sub New(firstOffsetHours As Integer, firstName As String)
        parameters:
        - id: firstOffsetHours
          type: System.Int32
          description: Standard offset in hours in the first zone interval.
        - id: firstName
          type: System.String
          description: Name of the first zone interval.
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor(System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Builder(Int32, Int32)
        VB: Builder(Int32, Int32)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Builder(Int32, Int32)
        VB: MultiTransitionDateTimeZone.Builder.Builder(Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder(System.Int32, System.Int32)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder(System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 123
      summary: "\nConstructs a builder using the given standard offset and saving offset. The ID is initially \"MultiZone\".\n"
      example: []
      syntax:
        content:
          CSharp: public Builder(int firstStandardOffsetHours, int firstSavingOffsetHours)
          VB: Public Sub New(firstStandardOffsetHours As Integer, firstSavingOffsetHours As Integer)
        parameters:
        - id: firstStandardOffsetHours
          type: System.Int32
          description: Standard offset in hours in the first zone interval.
        - id: firstSavingOffsetHours
          type: System.Int32
          description: Standard offset in hours in the first zone interval.
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor(System.Int32,System.Int32,System.String)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor(System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: Builder(Int32, Int32, String)
        VB: Builder(Int32, Int32, String)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Builder(Int32, Int32, String)
        VB: MultiTransitionDateTimeZone.Builder.Builder(Int32, Int32, String)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder(System.Int32, System.Int32, System.String)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder(System.Int32, System.Int32, System.String)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 135
      summary: "\nConstructs a builder using the given first name, standard offset, and daylight saving offset.\nThe ID is initially \"MultiZone\".\n"
      example: []
      syntax:
        content:
          CSharp: public Builder(int firstStandardOffsetHours, int firstSavingOffsetHours, string firstName)
          VB: Public Sub New(firstStandardOffsetHours As Integer, firstSavingOffsetHours As Integer, firstName As String)
        parameters:
        - id: firstStandardOffsetHours
          type: System.Int32
          description: Standard offset in hours in the first zone interval.
        - id: firstSavingOffsetHours
          type: System.Int32
          description: Daylight saving offset in hours in the first zone interval.
        - id: firstName
          type: System.String
          description: Name of the first zone interval.
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant,System.Int32)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant,System.Int32)
      language: CSharp
      name:
        CSharp: Add(Instant, Int32)
        VB: Add(Instant, Int32)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Add(Instant, Int32)
        VB: MultiTransitionDateTimeZone.Builder.Add(Instant, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant, System.Int32)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant, System.Int32)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Add
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 149
      summary: "\nAdds a transition at the given instant, to the specified new standard offset,\nwith no daylight saving. The name is generated from the transition.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(Instant transition, int newStandardOffsetHours)
          VB: Public Sub Add(transition As Instant, newStandardOffsetHours As Integer)
        parameters:
        - id: transition
          type: NodaTime.Instant
          description: Instant at which the zone changes.
        - id: newStandardOffsetHours
          type: System.Int32
          description: The new standard offset, in hours.
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant,System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Add(Instant, Int32, Int32)
        VB: Add(Instant, Int32, Int32)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Add(Instant, Int32, Int32)
        VB: MultiTransitionDateTimeZone.Builder.Add(Instant, Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant, System.Int32, System.Int32)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant, System.Int32, System.Int32)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Add
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 161
      summary: "\nAdds a transition at the given instant, to the specified new standard offset,\nwith the new specified daylight saving. The name is generated from the transition.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(Instant transition, int newStandardOffsetHours, int newSavingOffsetHours)
          VB: Public Sub Add(transition As Instant, newStandardOffsetHours As Integer, newSavingOffsetHours As Integer)
        parameters:
        - id: transition
          type: NodaTime.Instant
          description: Instant at which the zone changes.
        - id: newStandardOffsetHours
          type: System.Int32
          description: The new standard offset, in hours.
        - id: newSavingOffsetHours
          type: System.Int32
          description: The new daylight saving offset, in hours.
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant,System.Int32,System.Int32,System.String)
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant,System.Int32,System.Int32,System.String)
      language: CSharp
      name:
        CSharp: Add(Instant, Int32, Int32, String)
        VB: Add(Instant, Int32, Int32, String)
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Add(Instant, Int32, Int32, String)
        VB: MultiTransitionDateTimeZone.Builder.Add(Instant, Int32, Int32, String)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant, System.Int32, System.Int32, System.String)
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add(NodaTime.Instant, System.Int32, System.Int32, System.String)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Add
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 174
      summary: "\nAdds a transition at the given instant, to the specified new standard offset,\nwith the new specified daylight saving. The name is generated from the transition.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(Instant transition, int newStandardOffsetHours, int newSavingOffsetHours, string newName)
          VB: Public Sub Add(transition As Instant, newStandardOffsetHours As Integer, newSavingOffsetHours As Integer, newName As String)
        parameters:
        - id: transition
          type: NodaTime.Instant
          description: Instant at which the zone changes.
        - id: newStandardOffsetHours
          type: System.Int32
          description: The new standard offset, in hours.
        - id: newSavingOffsetHours
          type: System.Int32
          description: The new daylight saving offset, in hours.
        - id: newName
          type: System.String
          description: The new zone interval name.
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build
      language: CSharp
      name:
        CSharp: Build()
        VB: Build()
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.Build()
        VB: MultiTransitionDateTimeZone.Builder.Build()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build()
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Build
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 189
      summary: "\nBuilds a <xref href=\"NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone\" data-throw-if-not-resolved=\"false\"></xref> from this builder, invalidating it in the process.\n"
      example: []
      syntax:
        content:
          CSharp: public MultiTransitionDateTimeZone Build()
          VB: Public Function Build As MultiTransitionDateTimeZone
        return:
          type: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
          description: The newly-built zone.
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone: 
    - isEii: true
      id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System#Collections#IEnumerable#GetEnumerator
      commentId: M:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System#Collections#IEnumerable#GetEnumerator
      language: CSharp
      name:
        CSharp: IEnumerable.GetEnumerator()
        VB: System.Collections.IEnumerable.GetEnumerator()
      nameWithType:
        CSharp: MultiTransitionDateTimeZone.Builder.IEnumerable.GetEnumerator()
        VB: MultiTransitionDateTimeZone.Builder.System.Collections.IEnumerable.GetEnumerator()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System.Collections.IEnumerable.GetEnumerator()
        VB: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System.Collections.IEnumerable.GetEnumerator()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: System.Collections.IEnumerable.GetEnumerator
        path: src/NodaTime.Testing/TimeZones/MultiTransitionDateTimeZone.cs
        startLine: 209
      summary: "\nWe don't *really* want to implement this, but we want the collection initializer...\n"
      example: []
      syntax:
        content:
          CSharp: IEnumerator IEnumerable.GetEnumerator()
          VB: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
        return:
          type: System.Collections.IEnumerator
      overload: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System#Collections#IEnumerable#GetEnumerator*
      implements:
      - System.Collections.IEnumerable.GetEnumerator
      modifiers:
        CSharp: []
        VB: []
    references:
      NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone: 
  - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
    commentId: T:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
    language: CSharp
    name:
      CSharp: FakeDateTimeZoneSource
      VB: FakeDateTimeZoneSource
    nameWithType:
      CSharp: FakeDateTimeZoneSource
      VB: FakeDateTimeZoneSource
    qualifiedName:
      CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
      VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing.TimeZones
    source:
      remote:
        path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: FakeDateTimeZoneSource
      path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      startLine: 20
    summary: "\nA time zone source for test purposes.\nCreate instances via <xref href=\"NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    remarks: >-
      Under the PCL, the mapping from TimeZoneInfo is performed

      using the StandardName property instead of the Id property, as the Id

      property isn't available. The standard name is almost always the same

      anyway, known exceptions including Jerusalem and the Malay Peninsula.
    example: []
    syntax:
      content:
        CSharp: 'public sealed class FakeDateTimeZoneSource : IDateTimeZoneSource'
        VB: >-
          Public NotInheritable Class FakeDateTimeZoneSource

              Implements IDateTimeZoneSource
    inheritance:
    - System.Object
    implements:
    - NodaTime.TimeZones.IDateTimeZoneSource
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider
      language: CSharp
      name:
        CSharp: ToProvider()
        VB: ToProvider()
      nameWithType:
        CSharp: FakeDateTimeZoneSource.ToProvider()
        VB: FakeDateTimeZoneSource.ToProvider()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider()
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: ToProvider
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 39
      summary: "\nCreates a time zone provider (<xref href=\"NodaTime.TimeZones.DateTimeZoneCache\" data-throw-if-not-resolved=\"false\"></xref>) from this source.\n"
      example: []
      syntax:
        content:
          CSharp: public IDateTimeZoneProvider ToProvider()
          VB: Public Function ToProvider As IDateTimeZoneProvider
        return:
          type: NodaTime.IDateTimeZoneProvider
          description: A provider backed by this source.
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.TimeZones.DateTimeZoneCache: 
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds
      language: CSharp
      name:
        CSharp: GetIds()
        VB: GetIds()
      nameWithType:
        CSharp: FakeDateTimeZoneSource.GetIds()
        VB: FakeDateTimeZoneSource.GetIds()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds()
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetIds
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 45
      example: []
      syntax:
        content:
          CSharp: public IEnumerable<string> GetIds()
          VB: Public Function GetIds As IEnumerable(Of String)
        return:
          type: System.Collections.Generic.IEnumerable{System.String}
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds*
      implements:
      - NodaTime.TimeZones.IDateTimeZoneSource.GetIds
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId
      commentId: P:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId
      language: CSharp
      name:
        CSharp: VersionId
        VB: VersionId
      nameWithType:
        CSharp: FakeDateTimeZoneSource.VersionId
        VB: FakeDateTimeZoneSource.VersionId
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: VersionId
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 51
      example: []
      syntax:
        content:
          CSharp: public string VersionId { get; }
          VB: Public ReadOnly Property VersionId As String
        parameters: []
        return:
          type: System.String
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId*
      implements:
      - NodaTime.TimeZones.IDateTimeZoneSource.VersionId
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId(System.String)
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId(System.String)
      language: CSharp
      name:
        CSharp: ForId(String)
        VB: ForId(String)
      nameWithType:
        CSharp: FakeDateTimeZoneSource.ForId(String)
        VB: FakeDateTimeZoneSource.ForId(String)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId(System.String)
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId(System.String)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: ForId
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 54
      example: []
      syntax:
        content:
          CSharp: public DateTimeZone ForId(string id)
          VB: Public Function ForId(id As String) As DateTimeZone
        parameters:
        - id: id
          type: System.String
        return:
          type: NodaTime.DateTimeZone
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId*
      implements:
      - NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
      language: CSharp
      name:
        CSharp: MapTimeZoneId(TimeZoneInfo)
        VB: MapTimeZoneId(TimeZoneInfo)
      nameWithType:
        CSharp: FakeDateTimeZoneSource.MapTimeZoneId(TimeZoneInfo)
        VB: FakeDateTimeZoneSource.MapTimeZoneId(TimeZoneInfo)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: MapTimeZoneId
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 66
      example: []
      syntax:
        content:
          CSharp: public string MapTimeZoneId(TimeZoneInfo timeZone)
          VB: Public Function MapTimeZoneId(timeZone As TimeZoneInfo) As String
        parameters:
        - id: timeZone
          type: System.TimeZoneInfo
        return:
          type: System.String
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId*
      implements:
      - NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder: 
  - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
    commentId: T:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
    language: CSharp
    name:
      CSharp: FakeDateTimeZoneSource.Builder
      VB: FakeDateTimeZoneSource.Builder
    nameWithType:
      CSharp: FakeDateTimeZoneSource.Builder
      VB: FakeDateTimeZoneSource.Builder
    qualifiedName:
      CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
      VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing.TimeZones
    source:
      remote:
        path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: Builder
      path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
      startLine: 85
    summary: "\nBuilder for <xref href=\"NodaTime.Testing.TimeZones.FakeDateTimeZoneSource\" data-throw-if-not-resolved=\"false\"></xref>, allowing the built object to\nbe immutable, but constructed via object/collection initializers.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class Builder : IEnumerable<DateTimeZone>, IEnumerable'
        VB: >-
          Public NotInheritable Class Builder

              Implements IEnumerable(Of DateTimeZone), IEnumerable
    inheritance:
    - System.Object
    implements:
    - System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}
    - System.Collections.IEnumerable
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
      commentId: P:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
      language: CSharp
      name:
        CSharp: BclIdsToZoneIds
        VB: BclIdsToZoneIds
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
        VB: FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: BclIdsToZoneIds
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 94
      summary: "\nThe dictionary mapping BCL <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> IDs to the canonical IDs\nserved within the provider being built.\n"
      example: []
      syntax:
        content:
          CSharp: public IDictionary<string, string> BclIdsToZoneIds { get; }
          VB: Public ReadOnly Property BclIdsToZoneIds As IDictionary(Of String, String)
        parameters: []
        return:
          type: System.Collections.Generic.IDictionary{System.String,System.String}
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        System.TimeZoneInfo: 
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
      commentId: P:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
      language: CSharp
      name:
        CSharp: Zones
        VB: Zones
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.Zones
        VB: FakeDateTimeZoneSource.Builder.Zones
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Zones
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 100
      summary: "\nList of zones, exposed as a property for use when a test needs to set properties as\nwell as adding zones.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<DateTimeZone> Zones { get; }
          VB: Public ReadOnly Property Zones As IList(Of DateTimeZone)
        parameters: []
        return:
          type: System.Collections.Generic.IList{NodaTime.DateTimeZone}
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
      commentId: P:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
      language: CSharp
      name:
        CSharp: VersionId
        VB: VersionId
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.VersionId
        VB: FakeDateTimeZoneSource.Builder.VersionId
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: VersionId
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 105
      summary: "\nThe version ID to advertise; defaults to \"TestZones\".\n"
      example: []
      syntax:
        content:
          CSharp: public string VersionId { get; set; }
          VB: Public Property VersionId As String
        parameters: []
        return:
          type: System.String
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor
      language: CSharp
      name:
        CSharp: Builder()
        VB: Builder()
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.Builder()
        VB: FakeDateTimeZoneSource.Builder.Builder()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Builder()
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Builder()
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 110
      summary: "\nCreates a new builder.\n"
      example: []
      syntax:
        content:
          CSharp: public Builder()
          VB: Public Sub New
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
      language: CSharp
      name:
        CSharp: Add(DateTimeZone)
        VB: Add(DateTimeZone)
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.Add(DateTimeZone)
        VB: FakeDateTimeZoneSource.Builder.Add(DateTimeZone)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add(NodaTime.DateTimeZone)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Add
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 119
      summary: "\nAdds a time zone to the builder.\n"
      example: []
      syntax:
        content:
          CSharp: public void Add(DateTimeZone zone)
          VB: Public Sub Add(zone As DateTimeZone)
        parameters:
        - id: zone
          type: NodaTime.DateTimeZone
          description: The zone to add.
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
      language: CSharp
      name:
        CSharp: GetEnumerator()
        VB: GetEnumerator()
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.GetEnumerator()
        VB: FakeDateTimeZoneSource.Builder.GetEnumerator()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator()
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetEnumerator
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 130
      summary: "\nReturns the zones within the builder. This mostly exists\nto enable collection initializers.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerator<DateTimeZone> GetEnumerator()
          VB: Public Function GetEnumerator As IEnumerator(Of DateTimeZone)
        return:
          type: System.Collections.Generic.IEnumerator{NodaTime.DateTimeZone}
          description: An iterator over the zones in this builder.
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator*
      implements:
      - System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}.GetEnumerator
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - isEii: true
      id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator
      language: CSharp
      name:
        CSharp: IEnumerable.GetEnumerator()
        VB: System.Collections.IEnumerable.GetEnumerator()
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.IEnumerable.GetEnumerator()
        VB: FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator()
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: System.Collections.IEnumerable.GetEnumerator
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 139
      summary: "\nExplicit interface implementation of <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: IEnumerator IEnumerable.GetEnumerator()
          VB: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
        return:
          type: System.Collections.IEnumerator
          description: An iterator over the zones in this builder.
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator*
      implements:
      - System.Collections.IEnumerable.GetEnumerator
      modifiers:
        CSharp: []
        VB: []
      references:
        System.Collections.IEnumerator: 
    - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
      commentId: M:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
      language: CSharp
      name:
        CSharp: Build()
        VB: Build()
      nameWithType:
        CSharp: FakeDateTimeZoneSource.Builder.Build()
        VB: FakeDateTimeZoneSource.Builder.Build()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build()
        VB: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Build
        path: src/NodaTime.Testing/TimeZones/FakeDateTimeZoneSource.cs
        startLine: 155
      summary: "\nBuilds a time zone source from this builder. The returned\nbuilder will be independent of this builder; further changes\nto this builder will not be reflected in the returned source.\n"
      remarks: "\nThis method performs some sanity checks, and throws exceptions if\nthey're violated. Those exceptions are not documented here, and you\nshouldn't be catching them anyway. (This is aimed at testing...)\n"
      example: []
      syntax:
        content:
          CSharp: public FakeDateTimeZoneSource Build()
          VB: Public Function Build As FakeDateTimeZoneSource
        return:
          type: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
          description: The newly-built time zone source.
      overload: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      NodaTime.Testing.TimeZones.FakeDateTimeZoneSource: 
  - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    commentId: T:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    language: CSharp
    name:
      CSharp: SingleTransitionDateTimeZone
      VB: SingleTransitionDateTimeZone
    nameWithType:
      CSharp: SingleTransitionDateTimeZone
      VB: SingleTransitionDateTimeZone
    qualifiedName:
      CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
      VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    type: Class
    assemblies:
    - NodaTime.Testing
    namespace: NodaTime.Testing.TimeZones
    source:
      remote:
        path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        branch: history
        repo: https://github.com/nodatime/nodatime.git
      id: SingleTransitionDateTimeZone
      path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
      startLine: 11
    summary: "\nTime zone with a single transition between two offsets. This provides a simple way to test behaviour across a transition.\n"
    example: []
    syntax:
      content:
        CSharp: 'public sealed class SingleTransitionDateTimeZone : DateTimeZone, IEquatable<DateTimeZone>, IZoneIntervalMap'
        VB: >-
          Public NotInheritable Class SingleTransitionDateTimeZone

              Inherits DateTimeZone

              Implements IEquatable(Of DateTimeZone), IZoneIntervalMap
    inheritance:
    - System.Object
    - NodaTime.DateTimeZone
    implements:
    - System.IEquatable{NodaTime.DateTimeZone}
    inheritedMembers:
    - NodaTime.DateTimeZone.Utc
    - NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
    - NodaTime.DateTimeZone.Id
    - NodaTime.DateTimeZone.MinOffset
    - NodaTime.DateTimeZone.MaxOffset
    - NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
    - NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    - NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
    - NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    - NodaTime.DateTimeZone.ToString
    - NodaTime.DateTimeZone.Equals(System.Object)
    - NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
    - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
    - NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      language: CSharp
      name:
        CSharp: EarlyInterval
        VB: EarlyInterval
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.EarlyInterval
        VB: SingleTransitionDateTimeZone.EarlyInterval
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: EarlyInterval
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 17
      summary: "\nThe <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> for the period before the transition, starting at the beginning of time.\n"
      example: []
      syntax:
        content:
          CSharp: public ZoneInterval EarlyInterval { get; }
          VB: Public ReadOnly Property EarlyInterval As ZoneInterval
        parameters: []
        return:
          type: NodaTime.TimeZones.ZoneInterval
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        NodaTime.TimeZones.ZoneInterval: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      language: CSharp
      name:
        CSharp: LateInterval
        VB: LateInterval
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.LateInterval
        VB: SingleTransitionDateTimeZone.LateInterval
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: LateInterval
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 23
      summary: "\nThe <xref href=\"NodaTime.TimeZones.ZoneInterval\" data-throw-if-not-resolved=\"false\"></xref> for the period after the transition, ending at the end of time.\n"
      example: []
      syntax:
        content:
          CSharp: public ZoneInterval LateInterval { get; }
          VB: Public ReadOnly Property LateInterval As ZoneInterval
        parameters: []
        return:
          type: NodaTime.TimeZones.ZoneInterval
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        NodaTime.TimeZones.ZoneInterval: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
      commentId: P:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
      language: CSharp
      name:
        CSharp: Transition
        VB: Transition
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.Transition
        VB: SingleTransitionDateTimeZone.Transition
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
      type: Property
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: Transition
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 28
      summary: "\nThe transition instant of the zone.\n"
      example: []
      syntax:
        content:
          CSharp: public Instant Transition { get; }
          VB: Public ReadOnly Property Transition As Instant
        parameters: []
        return:
          type: NodaTime.Instant
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: SingleTransitionDateTimeZone(Instant, Int32, Int32)
        VB: SingleTransitionDateTimeZone(Instant, Int32, Int32)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Int32, Int32)
        VB: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Int32, Int32)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, System.Int32, System.Int32)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 36
      summary: "\nCreates a zone with a single transition between two offsets.\n"
      example: []
      syntax:
        content:
          CSharp: public SingleTransitionDateTimeZone(Instant transitionPoint, int offsetBeforeHours, int offsetAfterHours)
          VB: Public Sub New(transitionPoint As Instant, offsetBeforeHours As Integer, offsetAfterHours As Integer)
        parameters:
        - id: transitionPoint
          type: NodaTime.Instant
          description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
        - id: offsetBeforeHours
          type: System.Int32
          description: The offset of local time from UTC, in hours, before the transition.
        - id: offsetAfterHours
          type: System.Int32
          description: The offset of local time from UTC, in hours, before the transition.
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Instant: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset)
      language: CSharp
      name:
        CSharp: SingleTransitionDateTimeZone(Instant, Offset, Offset)
        VB: SingleTransitionDateTimeZone(Instant, Offset, Offset)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset)
        VB: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 47
      summary: "\nCreates a zone with a single transition between two offsets.\n"
      example: []
      syntax:
        content:
          CSharp: public SingleTransitionDateTimeZone(Instant transitionPoint, Offset offsetBefore, Offset offsetAfter)
          VB: Public Sub New(transitionPoint As Instant, offsetBefore As Offset, offsetAfter As Offset)
        parameters:
        - id: transitionPoint
          type: NodaTime.Instant
          description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
        - id: offsetBefore
          type: NodaTime.Offset
          description: The offset of local time from UTC before the transition.
        - id: offsetAfter
          type: NodaTime.Offset
          description: The offset of local time from UTC before the transition.
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Instant: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset,System.String)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor(NodaTime.Instant,NodaTime.Offset,NodaTime.Offset,System.String)
      language: CSharp
      name:
        CSharp: SingleTransitionDateTimeZone(Instant, Offset, Offset, String)
        VB: SingleTransitionDateTimeZone(Instant, Offset, Offset, String)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset, String)
        VB: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(Instant, Offset, Offset, String)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset, System.String)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone(NodaTime.Instant, NodaTime.Offset, NodaTime.Offset, System.String)
      type: Constructor
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: .ctor
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 59
      summary: "\nCreates a zone with a single transition between two offsets.\n"
      example: []
      syntax:
        content:
          CSharp: public SingleTransitionDateTimeZone(Instant transitionPoint, Offset offsetBefore, Offset offsetAfter, string id)
          VB: Public Sub New(transitionPoint As Instant, offsetBefore As Offset, offsetAfter As Offset, id As String)
        parameters:
        - id: transitionPoint
          type: NodaTime.Instant
          description: The transition point as an <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>.
        - id: offsetBefore
          type: NodaTime.Offset
          description: The offset of local time from UTC before the transition.
        - id: offsetAfter
          type: NodaTime.Offset
          description: The offset of local time from UTC before the transition.
        - id: id
          type: System.String
          description: ID for the newly created time zone.
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        NodaTime.Instant: 
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      language: CSharp
      name:
        CSharp: GetZoneInterval(Instant)
        VB: GetZoneInterval(Instant)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.GetZoneInterval(Instant)
        VB: SingleTransitionDateTimeZone.GetZoneInterval(Instant)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval(NodaTime.Instant)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetZoneInterval
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 72
      remarks: "\nThis returns either the zone interval before or after the transition, based on the instant provided.\n"
      example: []
      syntax:
        content:
          CSharp: public override ZoneInterval GetZoneInterval(Instant instant)
          VB: Public Overrides Function GetZoneInterval(instant As Instant) As ZoneInterval
        parameters:
        - id: instant
          type: NodaTime.Instant
        return:
          type: NodaTime.TimeZones.ZoneInterval
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
      overridden: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      language: CSharp
      name:
        CSharp: EqualsImpl(DateTimeZone)
        VB: EqualsImpl(DateTimeZone)
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.EqualsImpl(DateTimeZone)
        VB: SingleTransitionDateTimeZone.EqualsImpl(DateTimeZone)
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: EqualsImpl
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 78
      example: []
      syntax:
        content:
          CSharp: protected override bool EqualsImpl(DateTimeZone zone)
          VB: Protected Overrides Function EqualsImpl(zone As DateTimeZone) As Boolean
        parameters:
        - id: zone
          type: NodaTime.DateTimeZone
        return:
          type: System.Boolean
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*
      overridden: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
    - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
      commentId: M:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: SingleTransitionDateTimeZone.GetHashCode()
        VB: SingleTransitionDateTimeZone.GetHashCode()
      qualifiedName:
        CSharp: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode()
        VB: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode()
      type: Method
      assemblies:
      - NodaTime.Testing
      namespace: NodaTime.Testing.TimeZones
      source:
        remote:
          path: 1.2.x/src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
          branch: history
          repo: https://github.com/nodatime/nodatime.git
        id: GetHashCode
        path: src/NodaTime.Testing/TimeZones/SingleTransitionDateTimeZone.cs
        startLine: 85
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*
      overridden: NodaTime.DateTimeZone.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
references:
  NodaTime.IClock:
    name:
      CSharp:
      - id: NodaTime.IClock
        name: IClock
        nameWithType: IClock
        qualifiedName: NodaTime.IClock
      VB:
      - id: NodaTime.IClock
        name: IClock
        nameWithType: IClock
        qualifiedName: NodaTime.IClock
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.IClock
  NodaTime.Testing.FakeClock.AutoAdvance:
    commentId: P:NodaTime.Testing.FakeClock.AutoAdvance
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  NodaTime:
    name:
      CSharp:
      - name: NodaTime
        nameWithType: NodaTime
        qualifiedName: NodaTime
      VB:
      - name: NodaTime
        nameWithType: NodaTime
        qualifiedName: NodaTime
    isDefinition: true
    commentId: N:NodaTime
  NodaTime.Instant:
    name:
      CSharp:
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      VB:
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.Instant
  NodaTime.Testing.FakeClock.#ctor*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.#ctor*
        name: FakeClock
        nameWithType: FakeClock.FakeClock
        qualifiedName: NodaTime.Testing.FakeClock.FakeClock
      VB:
      - id: NodaTime.Testing.FakeClock.#ctor*
        name: FakeClock
        nameWithType: FakeClock.FakeClock
        qualifiedName: NodaTime.Testing.FakeClock.FakeClock
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.#ctor
  NodaTime.Duration:
    name:
      CSharp:
      - id: NodaTime.Duration
        name: Duration
        nameWithType: Duration
        qualifiedName: NodaTime.Duration
      VB:
      - id: NodaTime.Duration
        name: Duration
        nameWithType: Duration
        qualifiedName: NodaTime.Duration
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.Duration
  NodaTime.Testing.FakeClock:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock
        name: FakeClock
        nameWithType: FakeClock
        qualifiedName: NodaTime.Testing.FakeClock
      VB:
      - id: NodaTime.Testing.FakeClock
        name: FakeClock
        nameWithType: FakeClock
        qualifiedName: NodaTime.Testing.FakeClock
    isDefinition: true
    parent: NodaTime.Testing
    commentId: T:NodaTime.Testing.FakeClock
  NodaTime.Testing:
    name:
      CSharp:
      - name: NodaTime.Testing
        nameWithType: NodaTime.Testing
        qualifiedName: NodaTime.Testing
      VB:
      - name: NodaTime.Testing
        nameWithType: NodaTime.Testing
        qualifiedName: NodaTime.Testing
    isDefinition: true
    commentId: N:NodaTime.Testing
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  NodaTime.Testing.FakeClock.FromUtc*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.FromUtc*
        name: FromUtc
        nameWithType: FakeClock.FromUtc
        qualifiedName: NodaTime.Testing.FakeClock.FromUtc
      VB:
      - id: NodaTime.Testing.FakeClock.FromUtc*
        name: FromUtc
        nameWithType: FakeClock.FromUtc
        qualifiedName: NodaTime.Testing.FakeClock.FromUtc
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.FromUtc
  NodaTime.Testing.FakeClock.Advance*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.Advance*
        name: Advance
        nameWithType: FakeClock.Advance
        qualifiedName: NodaTime.Testing.FakeClock.Advance
      VB:
      - id: NodaTime.Testing.FakeClock.Advance*
        name: Advance
        nameWithType: FakeClock.Advance
        qualifiedName: NodaTime.Testing.FakeClock.Advance
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.Advance
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  NodaTime.Testing.FakeClock.AdvanceTicks*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceTicks*
        name: AdvanceTicks
        nameWithType: FakeClock.AdvanceTicks
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceTicks
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceTicks*
        name: AdvanceTicks
        nameWithType: FakeClock.AdvanceTicks
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceTicks
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceTicks
  NodaTime.Testing.FakeClock.AdvanceMilliseconds*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceMilliseconds*
        name: AdvanceMilliseconds
        nameWithType: FakeClock.AdvanceMilliseconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMilliseconds
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceMilliseconds*
        name: AdvanceMilliseconds
        nameWithType: FakeClock.AdvanceMilliseconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMilliseconds
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceMilliseconds
  NodaTime.Testing.FakeClock.AdvanceSeconds*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceSeconds*
        name: AdvanceSeconds
        nameWithType: FakeClock.AdvanceSeconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceSeconds
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceSeconds*
        name: AdvanceSeconds
        nameWithType: FakeClock.AdvanceSeconds
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceSeconds
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceSeconds
  NodaTime.Testing.FakeClock.AdvanceMinutes*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceMinutes*
        name: AdvanceMinutes
        nameWithType: FakeClock.AdvanceMinutes
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMinutes
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceMinutes*
        name: AdvanceMinutes
        nameWithType: FakeClock.AdvanceMinutes
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceMinutes
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceMinutes
  NodaTime.Testing.FakeClock.AdvanceHours*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceHours*
        name: AdvanceHours
        nameWithType: FakeClock.AdvanceHours
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceHours
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceHours*
        name: AdvanceHours
        nameWithType: FakeClock.AdvanceHours
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceHours
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceHours
  NodaTime.Testing.FakeClock.AdvanceDays*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AdvanceDays*
        name: AdvanceDays
        nameWithType: FakeClock.AdvanceDays
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceDays
      VB:
      - id: NodaTime.Testing.FakeClock.AdvanceDays*
        name: AdvanceDays
        nameWithType: FakeClock.AdvanceDays
        qualifiedName: NodaTime.Testing.FakeClock.AdvanceDays
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AdvanceDays
  NodaTime.Testing.FakeClock.Reset*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.Reset*
        name: Reset
        nameWithType: FakeClock.Reset
        qualifiedName: NodaTime.Testing.FakeClock.Reset
      VB:
      - id: NodaTime.Testing.FakeClock.Reset*
        name: Reset
        nameWithType: FakeClock.Reset
        qualifiedName: NodaTime.Testing.FakeClock.Reset
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.Reset
  NodaTime.Testing.FakeClock.Now*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.Now*
        name: Now
        nameWithType: FakeClock.Now
        qualifiedName: NodaTime.Testing.FakeClock.Now
      VB:
      - id: NodaTime.Testing.FakeClock.Now*
        name: Now
        nameWithType: FakeClock.Now
        qualifiedName: NodaTime.Testing.FakeClock.Now
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.Now
  NodaTime.IClock.Now:
    name:
      CSharp:
      - id: NodaTime.IClock.Now
        name: Now
        nameWithType: IClock.Now
        qualifiedName: NodaTime.IClock.Now
      VB:
      - id: NodaTime.IClock.Now
        name: Now
        nameWithType: IClock.Now
        qualifiedName: NodaTime.IClock.Now
    isDefinition: true
    parent: NodaTime.IClock
    commentId: P:NodaTime.IClock.Now
  NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration):
    commentId: M:NodaTime.Testing.FakeClock.#ctor(NodaTime.Instant,NodaTime.Duration)
  NodaTime.Testing.FakeClock.Reset(NodaTime.Instant):
    commentId: M:NodaTime.Testing.FakeClock.Reset(NodaTime.Instant)
  NodaTime.Testing.FakeClock.Advance(NodaTime.Duration):
    commentId: M:NodaTime.Testing.FakeClock.Advance(NodaTime.Duration)
  NodaTime.Testing.FakeClock.Now:
    commentId: P:NodaTime.Testing.FakeClock.Now
  NodaTime.Testing.FakeClock.AutoAdvance*:
    name:
      CSharp:
      - id: NodaTime.Testing.FakeClock.AutoAdvance*
        name: AutoAdvance
        nameWithType: FakeClock.AutoAdvance
        qualifiedName: NodaTime.Testing.FakeClock.AutoAdvance
      VB:
      - id: NodaTime.Testing.FakeClock.AutoAdvance*
        name: AutoAdvance
        nameWithType: FakeClock.AutoAdvance
        qualifiedName: NodaTime.Testing.FakeClock.AutoAdvance
    isDefinition: true
    commentId: Overload:NodaTime.Testing.FakeClock.AutoAdvance
  NodaTime.DateTimeZone:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      VB:
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.DateTimeZone
  NodaTime.DateTimeZone.Utc:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Utc
        name: Utc
        nameWithType: DateTimeZone.Utc
        qualifiedName: NodaTime.DateTimeZone.Utc
      VB:
      - id: NodaTime.DateTimeZone.Utc
        name: Utc
        nameWithType: DateTimeZone.Utc
        qualifiedName: NodaTime.DateTimeZone.Utc
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.Utc
  NodaTime.DateTimeZone.ForOffset(NodaTime.Offset):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
        name: ForOffset
        nameWithType: DateTimeZone.ForOffset
        qualifiedName: NodaTime.DateTimeZone.ForOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
        name: ForOffset
        nameWithType: DateTimeZone.ForOffset
        qualifiedName: NodaTime.DateTimeZone.ForOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.ForOffset(NodaTime.Offset)
  NodaTime.DateTimeZone.Id:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Id
        name: Id
        nameWithType: DateTimeZone.Id
        qualifiedName: NodaTime.DateTimeZone.Id
      VB:
      - id: NodaTime.DateTimeZone.Id
        name: Id
        nameWithType: DateTimeZone.Id
        qualifiedName: NodaTime.DateTimeZone.Id
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.Id
  NodaTime.DateTimeZone.MinOffset:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.MinOffset
        name: MinOffset
        nameWithType: DateTimeZone.MinOffset
        qualifiedName: NodaTime.DateTimeZone.MinOffset
      VB:
      - id: NodaTime.DateTimeZone.MinOffset
        name: MinOffset
        nameWithType: DateTimeZone.MinOffset
        qualifiedName: NodaTime.DateTimeZone.MinOffset
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.MinOffset
  NodaTime.DateTimeZone.MaxOffset:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.MaxOffset
        name: MaxOffset
        nameWithType: DateTimeZone.MaxOffset
        qualifiedName: NodaTime.DateTimeZone.MaxOffset
      VB:
      - id: NodaTime.DateTimeZone.MaxOffset
        name: MaxOffset
        nameWithType: DateTimeZone.MaxOffset
        qualifiedName: NodaTime.DateTimeZone.MaxOffset
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: P:NodaTime.DateTimeZone.MaxOffset
  NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
        name: GetUtcOffset
        nameWithType: DateTimeZone.GetUtcOffset
        qualifiedName: NodaTime.DateTimeZone.GetUtcOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
        name: GetUtcOffset
        nameWithType: DateTimeZone.GetUtcOffset
        qualifiedName: NodaTime.DateTimeZone.GetUtcOffset
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetUtcOffset(NodaTime.Instant)
  NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
        name: AtStartOfDay
        nameWithType: DateTimeZone.AtStartOfDay
        qualifiedName: NodaTime.DateTimeZone.AtStartOfDay
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDate
        name: LocalDate
        nameWithType: LocalDate
        qualifiedName: NodaTime.LocalDate
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
        name: AtStartOfDay
        nameWithType: DateTimeZone.AtStartOfDay
        qualifiedName: NodaTime.DateTimeZone.AtStartOfDay
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDate
        name: LocalDate
        nameWithType: LocalDate
        qualifiedName: NodaTime.LocalDate
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
        name: MapLocal
        nameWithType: DateTimeZone.MapLocal
        qualifiedName: NodaTime.DateTimeZone.MapLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
        name: MapLocal
        nameWithType: DateTimeZone.MapLocal
        qualifiedName: NodaTime.DateTimeZone.MapLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.MapLocal(NodaTime.LocalDateTime)
  NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
        name: ResolveLocal
        nameWithType: DateTimeZone.ResolveLocal
        qualifiedName: NodaTime.DateTimeZone.ResolveLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodaTime.TimeZones.ZoneLocalMappingResolver
        name: ZoneLocalMappingResolver
        nameWithType: ZoneLocalMappingResolver
        qualifiedName: NodaTime.TimeZones.ZoneLocalMappingResolver
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
        name: ResolveLocal
        nameWithType: DateTimeZone.ResolveLocal
        qualifiedName: NodaTime.DateTimeZone.ResolveLocal
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodaTime.TimeZones.ZoneLocalMappingResolver
        name: ZoneLocalMappingResolver
        nameWithType: ZoneLocalMappingResolver
        qualifiedName: NodaTime.TimeZones.ZoneLocalMappingResolver
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.ResolveLocal(NodaTime.LocalDateTime,NodaTime.TimeZones.ZoneLocalMappingResolver)
  NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
        name: AtStrictly
        nameWithType: DateTimeZone.AtStrictly
        qualifiedName: NodaTime.DateTimeZone.AtStrictly
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
        name: AtStrictly
        nameWithType: DateTimeZone.AtStrictly
        qualifiedName: NodaTime.DateTimeZone.AtStrictly
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
        name: AtLeniently
        nameWithType: DateTimeZone.AtLeniently
        qualifiedName: NodaTime.DateTimeZone.AtLeniently
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
        name: AtLeniently
        nameWithType: DateTimeZone.AtLeniently
        qualifiedName: NodaTime.DateTimeZone.AtLeniently
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.LocalDateTime
        name: LocalDateTime
        nameWithType: LocalDateTime
        qualifiedName: NodaTime.LocalDateTime
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  NodaTime.DateTimeZone.ToString:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.ToString
        name: ToString
        nameWithType: DateTimeZone.ToString
        qualifiedName: NodaTime.DateTimeZone.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.ToString
        name: ToString
        nameWithType: DateTimeZone.ToString
        qualifiedName: NodaTime.DateTimeZone.ToString
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.ToString
  NodaTime.DateTimeZone.Equals(System.Object):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Equals(System.Object)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.Equals(System.Object)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.Equals(System.Object)
  NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
        name: Equals
        nameWithType: DateTimeZone.Equals
        qualifiedName: NodaTime.DateTimeZone.Equals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.Equals(NodaTime.DateTimeZone)
  NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
        name: GetZoneIntervals
        nameWithType: DateTimeZone.GetZoneIntervals
        qualifiedName: NodaTime.DateTimeZone.GetZoneIntervals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
        name: GetZoneIntervals
        nameWithType: DateTimeZone.GetZoneIntervals
        qualifiedName: NodaTime.DateTimeZone.GetZoneIntervals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Instant,NodaTime.Instant)
  NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
        name: GetZoneIntervals
        nameWithType: DateTimeZone.GetZoneIntervals
        qualifiedName: NodaTime.DateTimeZone.GetZoneIntervals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Interval
        name: Interval
        nameWithType: Interval
        qualifiedName: NodaTime.Interval
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
        name: GetZoneIntervals
        nameWithType: DateTimeZone.GetZoneIntervals
        qualifiedName: NodaTime.DateTimeZone.GetZoneIntervals
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Interval
        name: Interval
        nameWithType: Interval
        qualifiedName: NodaTime.Interval
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetZoneIntervals(NodaTime.Interval)
  System.IEquatable`1:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.IEquatable`1
  System.IEquatable{NodaTime.DateTimeZone}:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1
    parent: System
    commentId: T:System.IEquatable{NodaTime.DateTimeZone}
  System.Collections.ObjectModel.ReadOnlyCollection`1:
    name:
      CSharp:
      - id: System.Collections.ObjectModel.ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: System.Collections.ObjectModel.ReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.ObjectModel.ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: System.Collections.ObjectModel.ReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  System.Collections.ObjectModel:
    name:
      CSharp:
      - name: System.Collections.ObjectModel
        nameWithType: System.Collections.ObjectModel
        qualifiedName: System.Collections.ObjectModel
      VB:
      - name: System.Collections.ObjectModel
        nameWithType: System.Collections.ObjectModel
        qualifiedName: System.Collections.ObjectModel
    isDefinition: true
    commentId: N:System.Collections.ObjectModel
  System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.TimeZones.ZoneInterval}:
    name:
      CSharp:
      - id: System.Collections.ObjectModel.ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: System.Collections.ObjectModel.ReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: NodaTime.TimeZones.ZoneInterval
        name: ZoneInterval
        nameWithType: ZoneInterval
        qualifiedName: NodaTime.TimeZones.ZoneInterval
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.ObjectModel.ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: System.Collections.ObjectModel.ReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: NodaTime.TimeZones.ZoneInterval
        name: ZoneInterval
        nameWithType: ZoneInterval
        qualifiedName: NodaTime.TimeZones.ZoneInterval
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.ObjectModel.ReadOnlyCollection`1
    parent: System.Collections.ObjectModel
    commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.TimeZones.ZoneInterval}
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals*
        name: Intervals
        nameWithType: MultiTransitionDateTimeZone.Intervals
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals*
        name: Intervals
        nameWithType: MultiTransitionDateTimeZone.Intervals
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Intervals
  System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.Instant}:
    name:
      CSharp:
      - id: System.Collections.ObjectModel.ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: System.Collections.ObjectModel.ReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.ObjectModel.ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: System.Collections.ObjectModel.ReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.ObjectModel.ReadOnlyCollection`1
    parent: System.Collections.ObjectModel
    commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{NodaTime.Instant}
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions*
        name: Transitions
        nameWithType: MultiTransitionDateTimeZone.Transitions
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions*
        name: Transitions
        nameWithType: MultiTransitionDateTimeZone.Transitions
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Transitions
  NodaTime.TimeZones:
    name:
      CSharp:
      - name: NodaTime.TimeZones
        nameWithType: NodaTime.TimeZones
        qualifiedName: NodaTime.TimeZones
      VB:
      - name: NodaTime.TimeZones
        nameWithType: NodaTime.TimeZones
        qualifiedName: NodaTime.TimeZones
    isDefinition: true
    commentId: N:NodaTime.TimeZones
  NodaTime.TimeZones.ZoneInterval:
    name:
      CSharp:
      - id: NodaTime.TimeZones.ZoneInterval
        name: ZoneInterval
        nameWithType: ZoneInterval
        qualifiedName: NodaTime.TimeZones.ZoneInterval
      VB:
      - id: NodaTime.TimeZones.ZoneInterval
        name: ZoneInterval
        nameWithType: ZoneInterval
        qualifiedName: NodaTime.TimeZones.ZoneInterval
    isDefinition: true
    parent: NodaTime.TimeZones
    commentId: T:NodaTime.TimeZones.ZoneInterval
  NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
        name: GetZoneInterval
        nameWithType: DateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.DateTimeZone.GetZoneInterval
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
        name: GetZoneInterval
        nameWithType: DateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.DateTimeZone.GetZoneInterval
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.Instant
        name: Instant
        nameWithType: Instant
        qualifiedName: NodaTime.Instant
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetZoneInterval(NodaTime.Instant)
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval*
        name: GetZoneInterval
        nameWithType: MultiTransitionDateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval*
        name: GetZoneInterval
        nameWithType: MultiTransitionDateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetZoneInterval
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone):
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
        name: EqualsImpl
        nameWithType: DateTimeZone.EqualsImpl
        qualifiedName: NodaTime.DateTimeZone.EqualsImpl
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
        name: EqualsImpl
        nameWithType: DateTimeZone.EqualsImpl
        qualifiedName: NodaTime.DateTimeZone.EqualsImpl
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.EqualsImpl(NodaTime.DateTimeZone)
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl*
        name: EqualsImpl
        nameWithType: MultiTransitionDateTimeZone.EqualsImpl
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl*
        name: EqualsImpl
        nameWithType: MultiTransitionDateTimeZone.EqualsImpl
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.EqualsImpl
  NodaTime.DateTimeZone.GetHashCode:
    name:
      CSharp:
      - id: NodaTime.DateTimeZone.GetHashCode
        name: GetHashCode
        nameWithType: DateTimeZone.GetHashCode
        qualifiedName: NodaTime.DateTimeZone.GetHashCode
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.DateTimeZone.GetHashCode
        name: GetHashCode
        nameWithType: DateTimeZone.GetHashCode
        qualifiedName: NodaTime.DateTimeZone.GetHashCode
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.DateTimeZone
    commentId: M:NodaTime.DateTimeZone.GetHashCode
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode*
        name: GetHashCode
        nameWithType: MultiTransitionDateTimeZone.GetHashCode
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode*
        name: GetHashCode
        nameWithType: MultiTransitionDateTimeZone.GetHashCode
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.GetHashCode
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
        name: MultiTransitionDateTimeZone
        nameWithType: MultiTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
        name: MultiTransitionDateTimeZone
        nameWithType: MultiTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
    isDefinition: true
    parent: NodaTime.Testing.TimeZones
    commentId: T:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.Collections.IEnumerable:
    name:
      CSharp:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
      VB:
      - id: System.Collections.IEnumerable
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.IEnumerable
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerable
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id*
        name: Id
        nameWithType: MultiTransitionDateTimeZone.Builder.Id
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id*
        name: Id
        nameWithType: MultiTransitionDateTimeZone.Builder.Id
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Id
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor*
        name: Builder
        nameWithType: MultiTransitionDateTimeZone.Builder.Builder
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor*
        name: Builder
        nameWithType: MultiTransitionDateTimeZone.Builder.Builder
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Builder
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.#ctor
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add*
        name: Add
        nameWithType: MultiTransitionDateTimeZone.Builder.Add
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add*
        name: Add
        nameWithType: MultiTransitionDateTimeZone.Builder.Add
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Add
  NodaTime.Testing.TimeZones:
    name:
      CSharp:
      - name: NodaTime.Testing.TimeZones
        nameWithType: NodaTime.Testing.TimeZones
        qualifiedName: NodaTime.Testing.TimeZones
      VB:
      - name: NodaTime.Testing.TimeZones
        nameWithType: NodaTime.Testing.TimeZones
        qualifiedName: NodaTime.Testing.TimeZones
    isDefinition: true
    commentId: N:NodaTime.Testing.TimeZones
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build*
        name: Build
        nameWithType: MultiTransitionDateTimeZone.Builder.Build
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build*
        name: Build
        nameWithType: MultiTransitionDateTimeZone.Builder.Build
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.Build
  System.Collections.IEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
      VB:
      - id: System.Collections.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.IEnumerator
        isExternal: true
    isDefinition: true
    parent: System.Collections
    commentId: T:System.Collections.IEnumerator
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System#Collections#IEnumerable#GetEnumerator*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System#Collections#IEnumerable#GetEnumerator*
        name: IEnumerable.GetEnumerator
        nameWithType: MultiTransitionDateTimeZone.Builder.IEnumerable.GetEnumerator
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System.Collections.IEnumerable.GetEnumerator
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System#Collections#IEnumerable#GetEnumerator*
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: MultiTransitionDateTimeZone.Builder.System.Collections.IEnumerable.GetEnumerator
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System.Collections.IEnumerable.GetEnumerator
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder.System#Collections#IEnumerable#GetEnumerator
  System.Collections.IEnumerable.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.IEnumerable.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable.GetEnumerator
        qualifiedName: System.Collections.IEnumerable.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Collections.IEnumerable
    commentId: M:System.Collections.IEnumerable.GetEnumerator
  NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
        name: MultiTransitionDateTimeZone.Builder
        nameWithType: MultiTransitionDateTimeZone.Builder
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
      VB:
      - id: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
        name: MultiTransitionDateTimeZone.Builder
        nameWithType: MultiTransitionDateTimeZone.Builder
        qualifiedName: NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
    isDefinition: true
    commentId: T:NodaTime.Testing.TimeZones.MultiTransitionDateTimeZone.Builder
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
        name: FakeDateTimeZoneSource.Builder
        nameWithType: FakeDateTimeZoneSource.Builder
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
        name: FakeDateTimeZoneSource.Builder
        nameWithType: FakeDateTimeZoneSource.Builder
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
    isDefinition: true
    commentId: T:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder
  NodaTime.TimeZones.IDateTimeZoneSource:
    name:
      CSharp:
      - id: NodaTime.TimeZones.IDateTimeZoneSource
        name: IDateTimeZoneSource
        nameWithType: IDateTimeZoneSource
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource
      VB:
      - id: NodaTime.TimeZones.IDateTimeZoneSource
        name: IDateTimeZoneSource
        nameWithType: IDateTimeZoneSource
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource
    isDefinition: true
    parent: NodaTime.TimeZones
    commentId: T:NodaTime.TimeZones.IDateTimeZoneSource
  NodaTime.TimeZones.DateTimeZoneCache:
    commentId: T:NodaTime.TimeZones.DateTimeZoneCache
  NodaTime.IDateTimeZoneProvider:
    name:
      CSharp:
      - id: NodaTime.IDateTimeZoneProvider
        name: IDateTimeZoneProvider
        nameWithType: IDateTimeZoneProvider
        qualifiedName: NodaTime.IDateTimeZoneProvider
      VB:
      - id: NodaTime.IDateTimeZoneProvider
        name: IDateTimeZoneProvider
        nameWithType: IDateTimeZoneProvider
        qualifiedName: NodaTime.IDateTimeZoneProvider
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.IDateTimeZoneProvider
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider*
        name: ToProvider
        nameWithType: FakeDateTimeZoneSource.ToProvider
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider*
        name: ToProvider
        nameWithType: FakeDateTimeZoneSource.ToProvider
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ToProvider
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.String}
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds*
        name: GetIds
        nameWithType: FakeDateTimeZoneSource.GetIds
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds*
        name: GetIds
        nameWithType: FakeDateTimeZoneSource.GetIds
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.GetIds
  NodaTime.TimeZones.IDateTimeZoneSource.GetIds:
    name:
      CSharp:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
        name: GetIds
        nameWithType: IDateTimeZoneSource.GetIds
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
        name: GetIds
        nameWithType: IDateTimeZoneSource.GetIds
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.GetIds
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.TimeZones.IDateTimeZoneSource
    commentId: M:NodaTime.TimeZones.IDateTimeZoneSource.GetIds
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId*
        name: VersionId
        nameWithType: FakeDateTimeZoneSource.VersionId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId*
        name: VersionId
        nameWithType: FakeDateTimeZoneSource.VersionId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.VersionId
  NodaTime.TimeZones.IDateTimeZoneSource.VersionId:
    name:
      CSharp:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.VersionId
        name: VersionId
        nameWithType: IDateTimeZoneSource.VersionId
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.VersionId
      VB:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.VersionId
        name: VersionId
        nameWithType: IDateTimeZoneSource.VersionId
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.VersionId
    isDefinition: true
    parent: NodaTime.TimeZones.IDateTimeZoneSource
    commentId: P:NodaTime.TimeZones.IDateTimeZoneSource.VersionId
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId*
        name: ForId
        nameWithType: FakeDateTimeZoneSource.ForId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId*
        name: ForId
        nameWithType: FakeDateTimeZoneSource.ForId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.ForId
  NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String):
    name:
      CSharp:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
        name: ForId
        nameWithType: IDateTimeZoneSource.ForId
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.ForId
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
        name: ForId
        nameWithType: IDateTimeZoneSource.ForId
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.ForId
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.TimeZones.IDateTimeZoneSource
    commentId: M:NodaTime.TimeZones.IDateTimeZoneSource.ForId(System.String)
  System.TimeZoneInfo:
    name:
      CSharp:
      - id: System.TimeZoneInfo
        name: TimeZoneInfo
        nameWithType: TimeZoneInfo
        qualifiedName: System.TimeZoneInfo
        isExternal: true
      VB:
      - id: System.TimeZoneInfo
        name: TimeZoneInfo
        nameWithType: TimeZoneInfo
        qualifiedName: System.TimeZoneInfo
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.TimeZoneInfo
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId*
        name: MapTimeZoneId
        nameWithType: FakeDateTimeZoneSource.MapTimeZoneId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId*
        name: MapTimeZoneId
        nameWithType: FakeDateTimeZoneSource.MapTimeZoneId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.MapTimeZoneId
  NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo):
    name:
      CSharp:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
        name: MapTimeZoneId
        nameWithType: IDateTimeZoneSource.MapTimeZoneId
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.TimeZoneInfo
        name: TimeZoneInfo
        nameWithType: TimeZoneInfo
        qualifiedName: System.TimeZoneInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
        name: MapTimeZoneId
        nameWithType: IDateTimeZoneSource.MapTimeZoneId
        qualifiedName: NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.TimeZoneInfo
        name: TimeZoneInfo
        nameWithType: TimeZoneInfo
        qualifiedName: System.TimeZoneInfo
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: NodaTime.TimeZones.IDateTimeZoneSource
    commentId: M:NodaTime.TimeZones.IDateTimeZoneSource.MapTimeZoneId(System.TimeZoneInfo)
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
        name: FakeDateTimeZoneSource
        nameWithType: FakeDateTimeZoneSource
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
        name: FakeDateTimeZoneSource
        nameWithType: FakeDateTimeZoneSource
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
    isDefinition: true
    parent: NodaTime.Testing.TimeZones
    commentId: T:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource
  System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}
  System.Collections.Generic.IDictionary`2:
    name:
      CSharp:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TKey
        nameWithType: TKey
        qualifiedName: TKey
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TValue
        nameWithType: TValue
        qualifiedName: TValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IDictionary`2
  System.Collections.Generic.IDictionary{System.String,System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IDictionary`2
        name: IDictionary
        nameWithType: IDictionary
        qualifiedName: System.Collections.Generic.IDictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IDictionary`2
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds*
        name: BclIdsToZoneIds
        nameWithType: FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds*
        name: BclIdsToZoneIds
        nameWithType: FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.BclIdsToZoneIds
  System.Collections.Generic.IList`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IList`1
  System.Collections.Generic.IList{NodaTime.DateTimeZone}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{NodaTime.DateTimeZone}
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones*
        name: Zones
        nameWithType: FakeDateTimeZoneSource.Builder.Zones
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones*
        name: Zones
        nameWithType: FakeDateTimeZoneSource.Builder.Zones
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Zones
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId*
        name: VersionId
        nameWithType: FakeDateTimeZoneSource.Builder.VersionId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId*
        name: VersionId
        nameWithType: FakeDateTimeZoneSource.Builder.VersionId
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.VersionId
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor*
        name: Builder
        nameWithType: FakeDateTimeZoneSource.Builder.Builder
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Builder
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor*
        name: Builder
        nameWithType: FakeDateTimeZoneSource.Builder.Builder
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Builder
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.#ctor
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add*
        name: Add
        nameWithType: FakeDateTimeZoneSource.Builder.Add
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add*
        name: Add
        nameWithType: FakeDateTimeZoneSource.Builder.Add
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Add
  System.Collections.Generic.IEnumerator`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerator`1
  System.Collections.Generic.IEnumerator{NodaTime.DateTimeZone}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: NodaTime.DateTimeZone
        name: DateTimeZone
        nameWithType: DateTimeZone
        qualifiedName: NodaTime.DateTimeZone
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerator`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerator{NodaTime.DateTimeZone}
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator*
        name: GetEnumerator
        nameWithType: FakeDateTimeZoneSource.Builder.GetEnumerator
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator*
        name: GetEnumerator
        nameWithType: FakeDateTimeZoneSource.Builder.GetEnumerator
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.GetEnumerator
  System.Collections.Generic.IEnumerable`1.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable<T>.GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable(Of T).GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}.GetEnumerator:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable<DateTimeZone>.GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable<NodaTime.DateTimeZone>.GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Collections.Generic.IEnumerable`1.GetEnumerator
        name: GetEnumerator
        nameWithType: IEnumerable(Of DateTimeZone).GetEnumerator
        qualifiedName: System.Collections.Generic.IEnumerable(Of NodaTime.DateTimeZone).GetEnumerator
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
    parent: System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}
    commentId: M:System.Collections.Generic.IEnumerable{NodaTime.DateTimeZone}.GetEnumerator
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator*
        name: IEnumerable.GetEnumerator
        nameWithType: FakeDateTimeZoneSource.Builder.IEnumerable.GetEnumerator
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator*
        name: System.Collections.IEnumerable.GetEnumerator
        nameWithType: FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System.Collections.IEnumerable.GetEnumerator
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.System#Collections#IEnumerable#GetEnumerator
  NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build*
        name: Build
        nameWithType: FakeDateTimeZoneSource.Builder.Build
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
      VB:
      - id: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build*
        name: Build
        nameWithType: FakeDateTimeZoneSource.Builder.Build
        qualifiedName: NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.FakeDateTimeZoneSource.Builder.Build
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
        name: EarlyInterval
        nameWithType: SingleTransitionDateTimeZone.EarlyInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval*
        name: EarlyInterval
        nameWithType: SingleTransitionDateTimeZone.EarlyInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EarlyInterval
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
        name: LateInterval
        nameWithType: SingleTransitionDateTimeZone.LateInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval*
        name: LateInterval
        nameWithType: SingleTransitionDateTimeZone.LateInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.LateInterval
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition*
        name: Transition
        nameWithType: SingleTransitionDateTimeZone.Transition
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition*
        name: Transition
        nameWithType: SingleTransitionDateTimeZone.Transition
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.Transition
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor*
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.SingleTransitionDateTimeZone
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.#ctor
  NodaTime.Offset:
    name:
      CSharp:
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
      VB:
      - id: NodaTime.Offset
        name: Offset
        nameWithType: Offset
        qualifiedName: NodaTime.Offset
    isDefinition: true
    parent: NodaTime
    commentId: T:NodaTime.Offset
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
        name: GetZoneInterval
        nameWithType: SingleTransitionDateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval*
        name: GetZoneInterval
        nameWithType: SingleTransitionDateTimeZone.GetZoneInterval
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetZoneInterval
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*
        name: EqualsImpl
        nameWithType: SingleTransitionDateTimeZone.EqualsImpl
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl*
        name: EqualsImpl
        nameWithType: SingleTransitionDateTimeZone.EqualsImpl
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.EqualsImpl
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*
        name: GetHashCode
        nameWithType: SingleTransitionDateTimeZone.GetHashCode
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode*
        name: GetHashCode
        nameWithType: SingleTransitionDateTimeZone.GetHashCode
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
    isDefinition: true
    commentId: Overload:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone.GetHashCode
  NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone:
    name:
      CSharp:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
      VB:
      - id: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
        name: SingleTransitionDateTimeZone
        nameWithType: SingleTransitionDateTimeZone
        qualifiedName: NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
    isDefinition: true
    commentId: T:NodaTime.Testing.TimeZones.SingleTransitionDateTimeZone
